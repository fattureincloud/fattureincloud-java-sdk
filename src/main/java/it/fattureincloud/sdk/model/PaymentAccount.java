/*
 * Fatture in Cloud API v2 - API Reference
 * Connect your software with Fatture in Cloud, the invoicing platform chosen by more than 500.000 businesses in Italy.   The Fatture in Cloud API is based on REST, and makes possible to interact with the user related data prior authorization via OAuth2 protocol.
 *
 * The version of the OpenAPI document: 2.0.21
 * Contact: info@fattureincloud.it
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package it.fattureincloud.sdk.model;

import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import it.fattureincloud.sdk.JSON;
import java.io.IOException;
import java.io.Serializable;
import java.util.Arrays;
import java.util.HashSet;
import java.util.Map.Entry;
import java.util.Objects;
import java.util.Set;
import org.openapitools.jackson.nullable.JsonNullable;

/** */
@ApiModel(description = "")
@javax.annotation.Generated(
    value = "org.openapitools.codegen.languages.JavaClientCodegen",
    date = "2022-11-14T07:38:51.580Z[Etc/UTC]")
public class PaymentAccount implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String SERIALIZED_NAME_ID = "id";

  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_NAME = "name";

  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_TYPE = "type";

  @SerializedName(SERIALIZED_NAME_TYPE)
  private PaymentAccountType type = PaymentAccountType.STANDARD;

  public static final String SERIALIZED_NAME_IBAN = "iban";

  @SerializedName(SERIALIZED_NAME_IBAN)
  private String iban;

  public static final String SERIALIZED_NAME_SIA = "sia";

  @SerializedName(SERIALIZED_NAME_SIA)
  private String sia;

  public static final String SERIALIZED_NAME_CUC = "cuc";

  @SerializedName(SERIALIZED_NAME_CUC)
  private String cuc;

  public static final String SERIALIZED_NAME_VIRTUAL = "virtual";

  @SerializedName(SERIALIZED_NAME_VIRTUAL)
  private Boolean virtual;

  public PaymentAccount() {}

  public PaymentAccount id(Integer id) {

    this.id = id;
    return this;
  }

  /**
   * Unique identifier
   *
   * @return id
   */
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Unique identifier")
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }

  public PaymentAccount name(String name) {

    this.name = name;
    return this;
  }

  /**
   * Payment account name.
   *
   * @return name
   */
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Conto Banca Intesa", value = "Payment account name.")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public PaymentAccount type(PaymentAccountType type) {

    this.type = type;
    return this;
  }

  /**
   * Get type
   *
   * @return type
   */
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  public PaymentAccountType getType() {
    return type;
  }

  public void setType(PaymentAccountType type) {
    this.type = type;
  }

  public PaymentAccount iban(String iban) {

    this.iban = iban;
    return this;
  }

  /**
   * Payment account iban.
   *
   * @return iban
   */
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Payment account iban.")
  public String getIban() {
    return iban;
  }

  public void setIban(String iban) {
    this.iban = iban;
  }

  public PaymentAccount sia(String sia) {

    this.sia = sia;
    return this;
  }

  /**
   * Payment account sia.
   *
   * @return sia
   */
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Payment account sia.")
  public String getSia() {
    return sia;
  }

  public void setSia(String sia) {
    this.sia = sia;
  }

  public PaymentAccount cuc(String cuc) {

    this.cuc = cuc;
    return this;
  }

  /**
   * Payment account cuc.
   *
   * @return cuc
   */
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Payment account cuc.")
  public String getCuc() {
    return cuc;
  }

  public void setCuc(String cuc) {
    this.cuc = cuc;
  }

  public PaymentAccount virtual(Boolean virtual) {

    this.virtual = virtual;
    return this;
  }

  /**
   * Determine if the payment method is virtual.
   *
   * @return virtual
   */
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Determine if the payment method is virtual.")
  public Boolean getVirtual() {
    return virtual;
  }

  public void setVirtual(Boolean virtual) {
    this.virtual = virtual;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PaymentAccount paymentAccount = (PaymentAccount) o;
    return Objects.equals(this.id, paymentAccount.id)
        && Objects.equals(this.name, paymentAccount.name)
        && Objects.equals(this.type, paymentAccount.type)
        && Objects.equals(this.iban, paymentAccount.iban)
        && Objects.equals(this.sia, paymentAccount.sia)
        && Objects.equals(this.cuc, paymentAccount.cuc)
        && Objects.equals(this.virtual, paymentAccount.virtual);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b
        || (a != null
            && b != null
            && a.isPresent()
            && b.isPresent()
            && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, name, type, iban, sia, cuc, virtual);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[] {a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PaymentAccount {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    iban: ").append(toIndentedString(iban)).append("\n");
    sb.append("    sia: ").append(toIndentedString(sia)).append("\n");
    sb.append("    cuc: ").append(toIndentedString(cuc)).append("\n");
    sb.append("    virtual: ").append(toIndentedString(virtual)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("name");
    openapiFields.add("type");
    openapiFields.add("iban");
    openapiFields.add("sia");
    openapiFields.add("cuc");
    openapiFields.add("virtual");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Object and throws an exception if issues found
   *
   * @param jsonObj JSON Object
   * @throws IOException if the JSON Object is invalid with respect to PaymentAccount
   */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
    if (jsonObj == null) {
      if (PaymentAccount.openapiRequiredFields.isEmpty()) {
        return;
      } else { // has required fields
        throw new IllegalArgumentException(
            String.format(
                "The required field(s) %s in PaymentAccount is not found in the empty JSON string",
                PaymentAccount.openapiRequiredFields.toString()));
      }
    }

    Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
    // check to see if the JSON string contains additional fields
    for (Entry<String, JsonElement> entry : entries) {
      if (!PaymentAccount.openapiFields.contains(entry.getKey())) {
        throw new IllegalArgumentException(
            String.format(
                "The field `%s` in the JSON string is not defined in the `PaymentAccount` properties. JSON: %s",
                entry.getKey(), jsonObj.toString()));
      }
    }
    if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull())
        && !jsonObj.get("name").isJsonPrimitive()) {
      throw new IllegalArgumentException(
          String.format(
              "Expected the field `name` to be a primitive type in the JSON string but got `%s`",
              jsonObj.get("name").toString()));
    }
    if ((jsonObj.get("iban") != null && !jsonObj.get("iban").isJsonNull())
        && !jsonObj.get("iban").isJsonPrimitive()) {
      throw new IllegalArgumentException(
          String.format(
              "Expected the field `iban` to be a primitive type in the JSON string but got `%s`",
              jsonObj.get("iban").toString()));
    }
    if ((jsonObj.get("sia") != null && !jsonObj.get("sia").isJsonNull())
        && !jsonObj.get("sia").isJsonPrimitive()) {
      throw new IllegalArgumentException(
          String.format(
              "Expected the field `sia` to be a primitive type in the JSON string but got `%s`",
              jsonObj.get("sia").toString()));
    }
    if ((jsonObj.get("cuc") != null && !jsonObj.get("cuc").isJsonNull())
        && !jsonObj.get("cuc").isJsonPrimitive()) {
      throw new IllegalArgumentException(
          String.format(
              "Expected the field `cuc` to be a primitive type in the JSON string but got `%s`",
              jsonObj.get("cuc").toString()));
    }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
      if (!PaymentAccount.class.isAssignableFrom(type.getRawType())) {
        return null; // this class only serializes 'PaymentAccount' and its subtypes
      }
      final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
      final TypeAdapter<PaymentAccount> thisAdapter =
          gson.getDelegateAdapter(this, TypeToken.get(PaymentAccount.class));

      return (TypeAdapter<T>)
          new TypeAdapter<PaymentAccount>() {
            @Override
            public void write(JsonWriter out, PaymentAccount value) throws IOException {
              JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
              elementAdapter.write(out, obj);
            }

            @Override
            public PaymentAccount read(JsonReader in) throws IOException {
              JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
              validateJsonObject(jsonObj);
              return thisAdapter.fromJsonTree(jsonObj);
            }
          }.nullSafe();
    }
  }

  /**
   * Create an instance of PaymentAccount given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PaymentAccount
   * @throws IOException if the JSON string is invalid with respect to PaymentAccount
   */
  public static PaymentAccount fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PaymentAccount.class);
  }

  /**
   * Convert an instance of PaymentAccount to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
