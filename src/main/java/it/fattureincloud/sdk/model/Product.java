/*
 * Fatture in Cloud API v2 - API Reference
 * Connect your software with Fatture in Cloud, the invoicing platform chosen by more than 400.000 businesses in Italy.   The Fatture in Cloud API is based on REST, and makes possible to interact with the user related data prior authorization via OAuth2 protocol.
 *
 * The version of the OpenAPI document: 2.0.18
 * Contact: info@fattureincloud.it
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package it.fattureincloud.sdk.model;

import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModelProperty;
import it.fattureincloud.sdk.JSON;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;
import java.util.HashSet;
import java.util.Map.Entry;
import java.util.Objects;
import java.util.Set;
import org.openapitools.jackson.nullable.JsonNullable;

/** Product */
@javax.annotation.Generated(
    value = "org.openapitools.codegen.languages.JavaClientCodegen",
    date = "2022-06-06T11:01:09.299158Z[Etc/UTC]")
public class Product {
  private static final long serialVersionUID = 1L;

  public static final String SERIALIZED_NAME_ID = "id";

  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_NAME = "name";

  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_CODE = "code";

  @SerializedName(SERIALIZED_NAME_CODE)
  private String code;

  public static final String SERIALIZED_NAME_NET_PRICE = "net_price";

  @SerializedName(SERIALIZED_NAME_NET_PRICE)
  private BigDecimal netPrice;

  public static final String SERIALIZED_NAME_GROSS_PRICE = "gross_price";

  @SerializedName(SERIALIZED_NAME_GROSS_PRICE)
  private BigDecimal grossPrice;

  public static final String SERIALIZED_NAME_USE_GROSS_PRICE = "use_gross_price";

  @SerializedName(SERIALIZED_NAME_USE_GROSS_PRICE)
  private Boolean useGrossPrice;

  public static final String SERIALIZED_NAME_DEFAULT_VAT = "default_vat";

  @SerializedName(SERIALIZED_NAME_DEFAULT_VAT)
  private VatType defaultVat;

  public static final String SERIALIZED_NAME_NET_COST = "net_cost";

  @SerializedName(SERIALIZED_NAME_NET_COST)
  private BigDecimal netCost;

  public static final String SERIALIZED_NAME_MEASURE = "measure";

  @SerializedName(SERIALIZED_NAME_MEASURE)
  private String measure;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";

  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_CATEGORY = "category";

  @SerializedName(SERIALIZED_NAME_CATEGORY)
  private String category;

  public static final String SERIALIZED_NAME_NOTES = "notes";

  @SerializedName(SERIALIZED_NAME_NOTES)
  private String notes;

  public static final String SERIALIZED_NAME_IN_STOCK = "in_stock";

  @SerializedName(SERIALIZED_NAME_IN_STOCK)
  private Boolean inStock;

  public static final String SERIALIZED_NAME_STOCK_INITIAL = "stock_initial";

  @SerializedName(SERIALIZED_NAME_STOCK_INITIAL)
  private BigDecimal stockInitial;

  public static final String SERIALIZED_NAME_STOCK_CURRENT = "stock_current";

  @SerializedName(SERIALIZED_NAME_STOCK_CURRENT)
  private BigDecimal stockCurrent;

  public static final String SERIALIZED_NAME_AVERAGE_COST = "average_cost";

  @SerializedName(SERIALIZED_NAME_AVERAGE_COST)
  private BigDecimal averageCost;

  public static final String SERIALIZED_NAME_AVERAGE_PRICE = "average_price";

  @SerializedName(SERIALIZED_NAME_AVERAGE_PRICE)
  private BigDecimal averagePrice;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";

  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private String createdAt;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updated_at";

  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private String updatedAt;

  public Product() {}

  public Product(BigDecimal stockCurrent) {
    this();
    this.stockCurrent = stockCurrent;
  }

  public Product id(Integer id) {

    this.id = id;
    return this;
  }

  /**
   * Unique identifier.
   *
   * @return id
   */
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Unique identifier.")
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }

  public Product name(String name) {

    this.name = name;
    return this;
  }

  /**
   * Product name.
   *
   * @return name
   */
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Product name.")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public Product code(String code) {

    this.code = code;
    return this;
  }

  /**
   * Product code.
   *
   * @return code
   */
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Product code.")
  public String getCode() {
    return code;
  }

  public void setCode(String code) {
    this.code = code;
  }

  public Product netPrice(BigDecimal netPrice) {

    this.netPrice = netPrice;
    return this;
  }

  /**
   * Net sale price (used if use_gross_price is false, otherwise it&#39;s competed automatically).
   *
   * @return netPrice
   */
  @javax.annotation.Nullable
  @ApiModelProperty(
      value =
          "Net sale price (used if use_gross_price is false, otherwise it's competed"
              + " automatically).")
  public BigDecimal getNetPrice() {
    return netPrice;
  }

  public void setNetPrice(BigDecimal netPrice) {
    this.netPrice = netPrice;
  }

  public Product grossPrice(BigDecimal grossPrice) {

    this.grossPrice = grossPrice;
    return this;
  }

  /**
   * Gross sale price (used if use_gross_price is false, otherwise it&#39;s competed automatically).
   *
   * @return grossPrice
   */
  @javax.annotation.Nullable
  @ApiModelProperty(
      value =
          "Gross sale price (used if use_gross_price is false, otherwise it's competed"
              + " automatically).")
  public BigDecimal getGrossPrice() {
    return grossPrice;
  }

  public void setGrossPrice(BigDecimal grossPrice) {
    this.grossPrice = grossPrice;
  }

  public Product useGrossPrice(Boolean useGrossPrice) {

    this.useGrossPrice = useGrossPrice;
    return this;
  }

  /**
   * Determine which price to use for calculations.
   *
   * @return useGrossPrice
   */
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Determine which price to use for calculations.")
  public Boolean getUseGrossPrice() {
    return useGrossPrice;
  }

  public void setUseGrossPrice(Boolean useGrossPrice) {
    this.useGrossPrice = useGrossPrice;
  }

  public Product defaultVat(VatType defaultVat) {

    this.defaultVat = defaultVat;
    return this;
  }

  /**
   * Get defaultVat
   *
   * @return defaultVat
   */
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  public VatType getDefaultVat() {
    return defaultVat;
  }

  public void setDefaultVat(VatType defaultVat) {
    this.defaultVat = defaultVat;
  }

  public Product netCost(BigDecimal netCost) {

    this.netCost = netCost;
    return this;
  }

  /**
   * Net cost of the product (used for received documents).
   *
   * @return netCost
   */
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Net cost of the product (used for received documents).")
  public BigDecimal getNetCost() {
    return netCost;
  }

  public void setNetCost(BigDecimal netCost) {
    this.netCost = netCost;
  }

  public Product measure(String measure) {

    this.measure = measure;
    return this;
  }

  /**
   * Unit of measure.
   *
   * @return measure
   */
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Unit of measure.")
  public String getMeasure() {
    return measure;
  }

  public void setMeasure(String measure) {
    this.measure = measure;
  }

  public Product description(String description) {

    this.description = description;
    return this;
  }

  /**
   * Product description.
   *
   * @return description
   */
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Product description.")
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public Product category(String category) {

    this.category = category;
    return this;
  }

  /**
   * Product category.
   *
   * @return category
   */
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Product category.")
  public String getCategory() {
    return category;
  }

  public void setCategory(String category) {
    this.category = category;
  }

  public Product notes(String notes) {

    this.notes = notes;
    return this;
  }

  /**
   * Extra notes.
   *
   * @return notes
   */
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Extra notes.")
  public String getNotes() {
    return notes;
  }

  public void setNotes(String notes) {
    this.notes = notes;
  }

  public Product inStock(Boolean inStock) {

    this.inStock = inStock;
    return this;
  }

  /**
   * Determine if the product is in stock.
   *
   * @return inStock
   */
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Determine if the product is in stock.")
  public Boolean getInStock() {
    return inStock;
  }

  public void setInStock(Boolean inStock) {
    this.inStock = inStock;
  }

  public Product stockInitial(BigDecimal stockInitial) {

    this.stockInitial = stockInitial;
    return this;
  }

  /**
   * Product initial stock.
   *
   * @return stockInitial
   */
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Product initial stock.")
  public BigDecimal getStockInitial() {
    return stockInitial;
  }

  public void setStockInitial(BigDecimal stockInitial) {
    this.stockInitial = stockInitial;
  }

  /**
   * [Read Only] Product current stock.
   *
   * @return stockCurrent
   */
  @javax.annotation.Nullable
  @ApiModelProperty(value = "[Read Only] Product current stock.")
  public BigDecimal getStockCurrent() {
    return stockCurrent;
  }

  public Product averageCost(BigDecimal averageCost) {

    this.averageCost = averageCost;
    return this;
  }

  /**
   * Product average cost.
   *
   * @return averageCost
   */
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Product average cost.")
  public BigDecimal getAverageCost() {
    return averageCost;
  }

  public void setAverageCost(BigDecimal averageCost) {
    this.averageCost = averageCost;
  }

  public Product averagePrice(BigDecimal averagePrice) {

    this.averagePrice = averagePrice;
    return this;
  }

  /**
   * Product average price.
   *
   * @return averagePrice
   */
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Product average price.")
  public BigDecimal getAveragePrice() {
    return averagePrice;
  }

  public void setAveragePrice(BigDecimal averagePrice) {
    this.averagePrice = averagePrice;
  }

  public Product createdAt(String createdAt) {

    this.createdAt = createdAt;
    return this;
  }

  /**
   * Get createdAt
   *
   * @return createdAt
   */
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  public String getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(String createdAt) {
    this.createdAt = createdAt;
  }

  public Product updatedAt(String updatedAt) {

    this.updatedAt = updatedAt;
    return this;
  }

  /**
   * Get updatedAt
   *
   * @return updatedAt
   */
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  public String getUpdatedAt() {
    return updatedAt;
  }

  public void setUpdatedAt(String updatedAt) {
    this.updatedAt = updatedAt;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Product product = (Product) o;
    return Objects.equals(this.id, product.id)
        && Objects.equals(this.name, product.name)
        && Objects.equals(this.code, product.code)
        && Objects.equals(this.netPrice, product.netPrice)
        && Objects.equals(this.grossPrice, product.grossPrice)
        && Objects.equals(this.useGrossPrice, product.useGrossPrice)
        && Objects.equals(this.defaultVat, product.defaultVat)
        && Objects.equals(this.netCost, product.netCost)
        && Objects.equals(this.measure, product.measure)
        && Objects.equals(this.description, product.description)
        && Objects.equals(this.category, product.category)
        && Objects.equals(this.notes, product.notes)
        && Objects.equals(this.inStock, product.inStock)
        && Objects.equals(this.stockInitial, product.stockInitial)
        && Objects.equals(this.stockCurrent, product.stockCurrent)
        && Objects.equals(this.averageCost, product.averageCost)
        && Objects.equals(this.averagePrice, product.averagePrice)
        && Objects.equals(this.createdAt, product.createdAt)
        && Objects.equals(this.updatedAt, product.updatedAt);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b
        || (a != null
            && b != null
            && a.isPresent()
            && b.isPresent()
            && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(
        id,
        name,
        code,
        netPrice,
        grossPrice,
        useGrossPrice,
        defaultVat,
        netCost,
        measure,
        description,
        category,
        notes,
        inStock,
        stockInitial,
        stockCurrent,
        averageCost,
        averagePrice,
        createdAt,
        updatedAt);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[] {a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Product {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("    netPrice: ").append(toIndentedString(netPrice)).append("\n");
    sb.append("    grossPrice: ").append(toIndentedString(grossPrice)).append("\n");
    sb.append("    useGrossPrice: ").append(toIndentedString(useGrossPrice)).append("\n");
    sb.append("    defaultVat: ").append(toIndentedString(defaultVat)).append("\n");
    sb.append("    netCost: ").append(toIndentedString(netCost)).append("\n");
    sb.append("    measure: ").append(toIndentedString(measure)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    category: ").append(toIndentedString(category)).append("\n");
    sb.append("    notes: ").append(toIndentedString(notes)).append("\n");
    sb.append("    inStock: ").append(toIndentedString(inStock)).append("\n");
    sb.append("    stockInitial: ").append(toIndentedString(stockInitial)).append("\n");
    sb.append("    stockCurrent: ").append(toIndentedString(stockCurrent)).append("\n");
    sb.append("    averageCost: ").append(toIndentedString(averageCost)).append("\n");
    sb.append("    averagePrice: ").append(toIndentedString(averagePrice)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("name");
    openapiFields.add("code");
    openapiFields.add("net_price");
    openapiFields.add("gross_price");
    openapiFields.add("use_gross_price");
    openapiFields.add("default_vat");
    openapiFields.add("net_cost");
    openapiFields.add("measure");
    openapiFields.add("description");
    openapiFields.add("category");
    openapiFields.add("notes");
    openapiFields.add("in_stock");
    openapiFields.add("stock_initial");
    openapiFields.add("stock_current");
    openapiFields.add("average_cost");
    openapiFields.add("average_price");
    openapiFields.add("created_at");
    openapiFields.add("updated_at");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Object and throws an exception if issues found
   *
   * @param jsonObj JSON Object
   * @throws IOException if the JSON Object is invalid with respect to Product
   */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
    if (jsonObj == null) {
      if (Product.openapiRequiredFields.isEmpty()) {
        return;
      } else { // has required fields
        throw new IllegalArgumentException(
            String.format(
                "The required field(s) %s in Product is not found in the empty JSON string",
                Product.openapiRequiredFields.toString()));
      }
    }

    Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
    // check to see if the JSON string contains additional fields
    for (Entry<String, JsonElement> entry : entries) {
      if (!Product.openapiFields.contains(entry.getKey())) {
        throw new IllegalArgumentException(
            String.format(
                "The field `%s` in the JSON string is not defined in the `Product` properties."
                    + " JSON: %s",
                entry.getKey(), jsonObj.toString()));
      }
    }
    if (jsonObj.get("name") != null && !jsonObj.get("name").isJsonPrimitive()) {
      throw new IllegalArgumentException(
          String.format(
              "Expected the field `name` to be a primitive type in the JSON string but got `%s`",
              jsonObj.get("name").toString()));
    }
    if (jsonObj.get("code") != null && !jsonObj.get("code").isJsonPrimitive()) {
      throw new IllegalArgumentException(
          String.format(
              "Expected the field `code` to be a primitive type in the JSON string but got `%s`",
              jsonObj.get("code").toString()));
    }
    // validate the optional field `default_vat`
    if (jsonObj.getAsJsonObject("default_vat") != null) {
      VatType.validateJsonObject(jsonObj.getAsJsonObject("default_vat"));
    }
    if (jsonObj.get("measure") != null && !jsonObj.get("measure").isJsonPrimitive()) {
      throw new IllegalArgumentException(
          String.format(
              "Expected the field `measure` to be a primitive type in the JSON string but got `%s`",
              jsonObj.get("measure").toString()));
    }
    if (jsonObj.get("description") != null && !jsonObj.get("description").isJsonPrimitive()) {
      throw new IllegalArgumentException(
          String.format(
              "Expected the field `description` to be a primitive type in the JSON string but got"
                  + " `%s`",
              jsonObj.get("description").toString()));
    }
    if (jsonObj.get("category") != null && !jsonObj.get("category").isJsonPrimitive()) {
      throw new IllegalArgumentException(
          String.format(
              "Expected the field `category` to be a primitive type in the JSON string but got"
                  + " `%s`",
              jsonObj.get("category").toString()));
    }
    if (jsonObj.get("notes") != null && !jsonObj.get("notes").isJsonPrimitive()) {
      throw new IllegalArgumentException(
          String.format(
              "Expected the field `notes` to be a primitive type in the JSON string but got `%s`",
              jsonObj.get("notes").toString()));
    }
    if (jsonObj.get("created_at") != null && !jsonObj.get("created_at").isJsonPrimitive()) {
      throw new IllegalArgumentException(
          String.format(
              "Expected the field `created_at` to be a primitive type in the JSON string but got"
                  + " `%s`",
              jsonObj.get("created_at").toString()));
    }
    if (jsonObj.get("updated_at") != null && !jsonObj.get("updated_at").isJsonPrimitive()) {
      throw new IllegalArgumentException(
          String.format(
              "Expected the field `updated_at` to be a primitive type in the JSON string but got"
                  + " `%s`",
              jsonObj.get("updated_at").toString()));
    }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
      if (!Product.class.isAssignableFrom(type.getRawType())) {
        return null; // this class only serializes 'Product' and its subtypes
      }
      final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
      final TypeAdapter<Product> thisAdapter =
          gson.getDelegateAdapter(this, TypeToken.get(Product.class));

      return (TypeAdapter<T>)
          new TypeAdapter<Product>() {
            @Override
            public void write(JsonWriter out, Product value) throws IOException {
              JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
              elementAdapter.write(out, obj);
            }

            @Override
            public Product read(JsonReader in) throws IOException {
              JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
              validateJsonObject(jsonObj);
              return thisAdapter.fromJsonTree(jsonObj);
            }
          }.nullSafe();
    }
  }

  /**
   * Create an instance of Product given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Product
   * @throws IOException if the JSON string is invalid with respect to Product
   */
  public static Product fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Product.class);
  }

  /**
   * Convert an instance of Product to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
