/*
 * Fatture in Cloud API v2 - API Reference
 * Connect your software with Fatture in Cloud, the invoicing platform chosen by more than 400.000 businesses in Italy.   The Fatture in Cloud API is based on REST, and makes possible to interact with the user related data prior authorization via OAuth2 protocol.
 *
 * The version of the OpenAPI document: 2.0.18
 * Contact: info@fattureincloud.it
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package it.fattureincloud.sdk.model;

import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModelProperty;
import it.fattureincloud.sdk.JSON;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashSet;
import java.util.Map.Entry;
import java.util.Objects;
import java.util.Set;
import org.openapitools.jackson.nullable.JsonNullable;

/** City */
@javax.annotation.Generated(
    value = "org.openapitools.codegen.languages.JavaClientCodegen",
    date = "2022-06-15T14:42:42.333969Z[Etc/UTC]")
public class City {
  private static final long serialVersionUID = 1L;

  public static final String SERIALIZED_NAME_POSTAL_CODE = "postal_code";

  @SerializedName(SERIALIZED_NAME_POSTAL_CODE)
  private String postalCode;

  public static final String SERIALIZED_NAME_CITY = "city";

  @SerializedName(SERIALIZED_NAME_CITY)
  private String city;

  public static final String SERIALIZED_NAME_PROVINCE = "province";

  @SerializedName(SERIALIZED_NAME_PROVINCE)
  private String province;

  public City() {}

  public City postalCode(String postalCode) {

    this.postalCode = postalCode;
    return this;
  }

  /**
   * City postal code.
   *
   * @return postalCode
   */
  @javax.annotation.Nullable
  @ApiModelProperty(value = "City postal code.")
  public String getPostalCode() {
    return postalCode;
  }

  public void setPostalCode(String postalCode) {
    this.postalCode = postalCode;
  }

  public City city(String city) {

    this.city = city;
    return this;
  }

  /**
   * City name.
   *
   * @return city
   */
  @javax.annotation.Nullable
  @ApiModelProperty(value = "City name.")
  public String getCity() {
    return city;
  }

  public void setCity(String city) {
    this.city = city;
  }

  public City province(String province) {

    this.province = province;
    return this;
  }

  /**
   * Province.
   *
   * @return province
   */
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Province.")
  public String getProvince() {
    return province;
  }

  public void setProvince(String province) {
    this.province = province;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    City city = (City) o;
    return Objects.equals(this.postalCode, city.postalCode)
        && Objects.equals(this.city, city.city)
        && Objects.equals(this.province, city.province);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b
        || (a != null
            && b != null
            && a.isPresent()
            && b.isPresent()
            && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(postalCode, city, province);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[] {a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class City {\n");
    sb.append("    postalCode: ").append(toIndentedString(postalCode)).append("\n");
    sb.append("    city: ").append(toIndentedString(city)).append("\n");
    sb.append("    province: ").append(toIndentedString(province)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("postal_code");
    openapiFields.add("city");
    openapiFields.add("province");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Object and throws an exception if issues found
   *
   * @param jsonObj JSON Object
   * @throws IOException if the JSON Object is invalid with respect to City
   */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
    if (jsonObj == null) {
      if (City.openapiRequiredFields.isEmpty()) {
        return;
      } else { // has required fields
        throw new IllegalArgumentException(
            String.format(
                "The required field(s) %s in City is not found in the empty JSON string",
                City.openapiRequiredFields.toString()));
      }
    }

    Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
    // check to see if the JSON string contains additional fields
    for (Entry<String, JsonElement> entry : entries) {
      if (!City.openapiFields.contains(entry.getKey())) {
        throw new IllegalArgumentException(
            String.format(
                "The field `%s` in the JSON string is not defined in the `City` properties. JSON:"
                    + " %s",
                entry.getKey(), jsonObj.toString()));
      }
    }
    if ((jsonObj.get("postal_code") != null && jsonObj.get("postal_code").isJsonNull())
        && !jsonObj.get("postal_code").isJsonPrimitive()) {
      throw new IllegalArgumentException(
          String.format(
              "Expected the field `postal_code` to be a primitive type in the JSON string but got"
                  + " `%s`",
              jsonObj.get("postal_code").toString()));
    }
    if ((jsonObj.get("city") != null && jsonObj.get("city").isJsonNull())
        && !jsonObj.get("city").isJsonPrimitive()) {
      throw new IllegalArgumentException(
          String.format(
              "Expected the field `city` to be a primitive type in the JSON string but got `%s`",
              jsonObj.get("city").toString()));
    }
    if ((jsonObj.get("province") != null && jsonObj.get("province").isJsonNull())
        && !jsonObj.get("province").isJsonPrimitive()) {
      throw new IllegalArgumentException(
          String.format(
              "Expected the field `province` to be a primitive type in the JSON string but got"
                  + " `%s`",
              jsonObj.get("province").toString()));
    }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
      if (!City.class.isAssignableFrom(type.getRawType())) {
        return null; // this class only serializes 'City' and its subtypes
      }
      final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
      final TypeAdapter<City> thisAdapter =
          gson.getDelegateAdapter(this, TypeToken.get(City.class));

      return (TypeAdapter<T>)
          new TypeAdapter<City>() {
            @Override
            public void write(JsonWriter out, City value) throws IOException {
              JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
              elementAdapter.write(out, obj);
            }

            @Override
            public City read(JsonReader in) throws IOException {
              JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
              validateJsonObject(jsonObj);
              return thisAdapter.fromJsonTree(jsonObj);
            }
          }.nullSafe();
    }
  }

  /**
   * Create an instance of City given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of City
   * @throws IOException if the JSON string is invalid with respect to City
   */
  public static City fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, City.class);
  }

  /**
   * Convert an instance of City to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
