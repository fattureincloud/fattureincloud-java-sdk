/*
 * Fatture in Cloud API v2 - API Reference
 * Connect your software with Fatture in Cloud, the invoicing platform chosen by more than 400.000 businesses in Italy.   The Fatture in Cloud API is based on REST, and makes possible to interact with the user related data prior authorization via OAuth2 protocol.
 *
 * The version of the OpenAPI document: 2.0.20
 * Contact: info@fattureincloud.it
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package it.fattureincloud.sdk.model;

import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModelProperty;
import it.fattureincloud.sdk.JSON;
import java.io.IOException;
import java.io.Serializable;
import java.util.Arrays;
import java.util.HashSet;
import java.util.Map.Entry;
import java.util.Objects;
import java.util.Set;
import org.openapitools.jackson.nullable.JsonNullable;

/** GetUserInfoResponseInfo */
@javax.annotation.Generated(
    value = "org.openapitools.codegen.languages.JavaClientCodegen",
    date = "2022-09-20T06:22:23.527Z[Etc/UTC]")
public class GetUserInfoResponseInfo implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String SERIALIZED_NAME_NEED_MARKETING_CONSENTS_CONFIRMATION =
      "need_marketing_consents_confirmation";

  @SerializedName(SERIALIZED_NAME_NEED_MARKETING_CONSENTS_CONFIRMATION)
  private Boolean needMarketingConsentsConfirmation;

  public static final String SERIALIZED_NAME_NEED_PASSWORD_CHANGE = "need_password_change";

  @SerializedName(SERIALIZED_NAME_NEED_PASSWORD_CHANGE)
  private Boolean needPasswordChange;

  public static final String SERIALIZED_NAME_NEED_TERMS_OF_SERVICE_CONFIRMATION =
      "need_terms_of_service_confirmation";

  @SerializedName(SERIALIZED_NAME_NEED_TERMS_OF_SERVICE_CONFIRMATION)
  private Boolean needTermsOfServiceConfirmation;

  public GetUserInfoResponseInfo() {}

  public GetUserInfoResponseInfo needMarketingConsentsConfirmation(
      Boolean needMarketingConsentsConfirmation) {

    this.needMarketingConsentsConfirmation = needMarketingConsentsConfirmation;
    return this;
  }

  /**
   * Get needMarketingConsentsConfirmation
   *
   * @return needMarketingConsentsConfirmation
   */
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  public Boolean getNeedMarketingConsentsConfirmation() {
    return needMarketingConsentsConfirmation;
  }

  public void setNeedMarketingConsentsConfirmation(Boolean needMarketingConsentsConfirmation) {
    this.needMarketingConsentsConfirmation = needMarketingConsentsConfirmation;
  }

  public GetUserInfoResponseInfo needPasswordChange(Boolean needPasswordChange) {

    this.needPasswordChange = needPasswordChange;
    return this;
  }

  /**
   * Get needPasswordChange
   *
   * @return needPasswordChange
   */
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  public Boolean getNeedPasswordChange() {
    return needPasswordChange;
  }

  public void setNeedPasswordChange(Boolean needPasswordChange) {
    this.needPasswordChange = needPasswordChange;
  }

  public GetUserInfoResponseInfo needTermsOfServiceConfirmation(
      Boolean needTermsOfServiceConfirmation) {

    this.needTermsOfServiceConfirmation = needTermsOfServiceConfirmation;
    return this;
  }

  /**
   * Get needTermsOfServiceConfirmation
   *
   * @return needTermsOfServiceConfirmation
   */
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  public Boolean getNeedTermsOfServiceConfirmation() {
    return needTermsOfServiceConfirmation;
  }

  public void setNeedTermsOfServiceConfirmation(Boolean needTermsOfServiceConfirmation) {
    this.needTermsOfServiceConfirmation = needTermsOfServiceConfirmation;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetUserInfoResponseInfo getUserInfoResponseInfo = (GetUserInfoResponseInfo) o;
    return Objects.equals(
            this.needMarketingConsentsConfirmation,
            getUserInfoResponseInfo.needMarketingConsentsConfirmation)
        && Objects.equals(this.needPasswordChange, getUserInfoResponseInfo.needPasswordChange)
        && Objects.equals(
            this.needTermsOfServiceConfirmation,
            getUserInfoResponseInfo.needTermsOfServiceConfirmation);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b
        || (a != null
            && b != null
            && a.isPresent()
            && b.isPresent()
            && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(
        needMarketingConsentsConfirmation, needPasswordChange, needTermsOfServiceConfirmation);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[] {a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetUserInfoResponseInfo {\n");
    sb.append("    needMarketingConsentsConfirmation: ")
        .append(toIndentedString(needMarketingConsentsConfirmation))
        .append("\n");
    sb.append("    needPasswordChange: ").append(toIndentedString(needPasswordChange)).append("\n");
    sb.append("    needTermsOfServiceConfirmation: ")
        .append(toIndentedString(needTermsOfServiceConfirmation))
        .append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("need_marketing_consents_confirmation");
    openapiFields.add("need_password_change");
    openapiFields.add("need_terms_of_service_confirmation");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Object and throws an exception if issues found
   *
   * @param jsonObj JSON Object
   * @throws IOException if the JSON Object is invalid with respect to GetUserInfoResponseInfo
   */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
    if (jsonObj == null) {
      if (GetUserInfoResponseInfo.openapiRequiredFields.isEmpty()) {
        return;
      } else { // has required fields
        throw new IllegalArgumentException(
            String.format(
                "The required field(s) %s in GetUserInfoResponseInfo is not found in the empty JSON string",
                GetUserInfoResponseInfo.openapiRequiredFields.toString()));
      }
    }

    Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
    // check to see if the JSON string contains additional fields
    for (Entry<String, JsonElement> entry : entries) {
      if (!GetUserInfoResponseInfo.openapiFields.contains(entry.getKey())) {
        throw new IllegalArgumentException(
            String.format(
                "The field `%s` in the JSON string is not defined in the `GetUserInfoResponseInfo` properties. JSON: %s",
                entry.getKey(), jsonObj.toString()));
      }
    }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
      if (!GetUserInfoResponseInfo.class.isAssignableFrom(type.getRawType())) {
        return null; // this class only serializes 'GetUserInfoResponseInfo' and its subtypes
      }
      final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
      final TypeAdapter<GetUserInfoResponseInfo> thisAdapter =
          gson.getDelegateAdapter(this, TypeToken.get(GetUserInfoResponseInfo.class));

      return (TypeAdapter<T>)
          new TypeAdapter<GetUserInfoResponseInfo>() {
            @Override
            public void write(JsonWriter out, GetUserInfoResponseInfo value) throws IOException {
              JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
              elementAdapter.write(out, obj);
            }

            @Override
            public GetUserInfoResponseInfo read(JsonReader in) throws IOException {
              JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
              validateJsonObject(jsonObj);
              return thisAdapter.fromJsonTree(jsonObj);
            }
          }.nullSafe();
    }
  }

  /**
   * Create an instance of GetUserInfoResponseInfo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetUserInfoResponseInfo
   * @throws IOException if the JSON string is invalid with respect to GetUserInfoResponseInfo
   */
  public static GetUserInfoResponseInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetUserInfoResponseInfo.class);
  }

  /**
   * Convert an instance of GetUserInfoResponseInfo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
