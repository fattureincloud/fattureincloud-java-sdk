/*
 * Fatture in Cloud API v2 - API Reference
 * Connect your software with Fatture in Cloud, the invoicing platform chosen by more than 500.000 businesses in Italy.   The Fatture in Cloud API is based on REST, and makes possible to interact with the user related data prior authorization via OAuth2 protocol.
 *
 * The version of the OpenAPI document: 2.0.25
 * Contact: info@fattureincloud.it
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package it.fattureincloud.sdk.model;

import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import it.fattureincloud.sdk.JSON;
import java.io.IOException;
import java.io.Serializable;
import java.math.BigDecimal;
import java.util.Arrays;
import java.util.HashSet;
import java.util.Map.Entry;
import java.util.Objects;
import java.util.Set;
import org.openapitools.jackson.nullable.JsonNullable;

/** */
@ApiModel(description = "")
@javax.annotation.Generated(
    value = "org.openapitools.codegen.languages.JavaClientCodegen",
    date = "2023-02-06T15:44:01.481Z[Etc/UTC]")
public class VatType implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String SERIALIZED_NAME_ID = "id";

  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_VALUE = "value";

  @SerializedName(SERIALIZED_NAME_VALUE)
  private BigDecimal value;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";

  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_NOTES = "notes";

  @SerializedName(SERIALIZED_NAME_NOTES)
  private String notes;

  public static final String SERIALIZED_NAME_E_INVOICE = "e_invoice";

  @SerializedName(SERIALIZED_NAME_E_INVOICE)
  private Boolean eInvoice;

  public static final String SERIALIZED_NAME_EI_TYPE = "ei_type";

  @SerializedName(SERIALIZED_NAME_EI_TYPE)
  private String eiType;

  public static final String SERIALIZED_NAME_EI_DESCRIPTION = "ei_description";

  @SerializedName(SERIALIZED_NAME_EI_DESCRIPTION)
  private String eiDescription;

  public static final String SERIALIZED_NAME_EDITABLE = "editable";

  @SerializedName(SERIALIZED_NAME_EDITABLE)
  private Boolean editable;

  public static final String SERIALIZED_NAME_IS_DISABLED = "is_disabled";

  @SerializedName(SERIALIZED_NAME_IS_DISABLED)
  private Boolean isDisabled;

  public VatType() {}

  public VatType(Boolean editable) {
    this();
    this.editable = editable;
  }

  public VatType id(Integer id) {

    this.id = id;
    return this;
  }

  /**
   * Unique identifier
   *
   * @return id
   */
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Unique identifier")
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }

  public VatType value(BigDecimal value) {

    this.value = value;
    return this;
  }

  /**
   * [Read Only] Percentual value.
   *
   * @return value
   */
  @javax.annotation.Nullable
  @ApiModelProperty(example = "22", value = "[Read Only] Percentual value.")
  public BigDecimal getValue() {
    return value;
  }

  public void setValue(BigDecimal value) {
    this.value = value;
  }

  public VatType description(String description) {

    this.description = description;
    return this;
  }

  /**
   * Short description.
   *
   * @return description
   */
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Non imponibile art. 123", value = "Short description.")
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public VatType notes(String notes) {

    this.notes = notes;
    return this;
  }

  /**
   * Long description and notes shown in documents.
   *
   * @return notes
   */
  @javax.annotation.Nullable
  @ApiModelProperty(
      example = "IVA non imponibile ai sensi dell'articolo 123, comma 2",
      value = "Long description and notes shown in documents.")
  public String getNotes() {
    return notes;
  }

  public void setNotes(String notes) {
    this.notes = notes;
  }

  public VatType eInvoice(Boolean eInvoice) {

    this.eInvoice = eInvoice;
    return this;
  }

  /**
   * Usable for e-invoices.
   *
   * @return eInvoice
   */
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Usable for e-invoices.")
  public Boolean geteInvoice() {
    return eInvoice;
  }

  public void seteInvoice(Boolean eInvoice) {
    this.eInvoice = eInvoice;
  }

  public VatType eiType(String eiType) {

    this.eiType = eiType;
    return this;
  }

  /**
   * E-invoice type (natura).
   *
   * @return eiType
   */
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2", value = "E-invoice type (natura).")
  public String getEiType() {
    return eiType;
  }

  public void setEiType(String eiType) {
    this.eiType = eiType;
  }

  public VatType eiDescription(String eiDescription) {

    this.eiDescription = eiDescription;
    return this;
  }

  /**
   * E-invoice description.
   *
   * @return eiDescription
   */
  @javax.annotation.Nullable
  @ApiModelProperty(value = "E-invoice description.")
  public String getEiDescription() {
    return eiDescription;
  }

  public void setEiDescription(String eiDescription) {
    this.eiDescription = eiDescription;
  }

  /**
   * [Read Only] Determine if this vat type is editable.
   *
   * @return editable
   */
  @javax.annotation.Nullable
  @ApiModelProperty(value = "[Read Only] Determine if this vat type is editable.")
  public Boolean getEditable() {
    return editable;
  }

  public VatType isDisabled(Boolean isDisabled) {

    this.isDisabled = isDisabled;
    return this;
  }

  /**
   * Determine if the vat type is disabled.
   *
   * @return isDisabled
   */
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Determine if the vat type is disabled.")
  public Boolean getIsDisabled() {
    return isDisabled;
  }

  public void setIsDisabled(Boolean isDisabled) {
    this.isDisabled = isDisabled;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VatType vatType = (VatType) o;
    return Objects.equals(this.id, vatType.id)
        && Objects.equals(this.value, vatType.value)
        && Objects.equals(this.description, vatType.description)
        && Objects.equals(this.notes, vatType.notes)
        && Objects.equals(this.eInvoice, vatType.eInvoice)
        && Objects.equals(this.eiType, vatType.eiType)
        && Objects.equals(this.eiDescription, vatType.eiDescription)
        && Objects.equals(this.editable, vatType.editable)
        && Objects.equals(this.isDisabled, vatType.isDisabled);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b
        || (a != null
            && b != null
            && a.isPresent()
            && b.isPresent()
            && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(
        id, value, description, notes, eInvoice, eiType, eiDescription, editable, isDisabled);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[] {a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VatType {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    notes: ").append(toIndentedString(notes)).append("\n");
    sb.append("    eInvoice: ").append(toIndentedString(eInvoice)).append("\n");
    sb.append("    eiType: ").append(toIndentedString(eiType)).append("\n");
    sb.append("    eiDescription: ").append(toIndentedString(eiDescription)).append("\n");
    sb.append("    editable: ").append(toIndentedString(editable)).append("\n");
    sb.append("    isDisabled: ").append(toIndentedString(isDisabled)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("value");
    openapiFields.add("description");
    openapiFields.add("notes");
    openapiFields.add("e_invoice");
    openapiFields.add("ei_type");
    openapiFields.add("ei_description");
    openapiFields.add("editable");
    openapiFields.add("is_disabled");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Object and throws an exception if issues found
   *
   * @param jsonObj JSON Object
   * @throws IOException if the JSON Object is invalid with respect to VatType
   */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
    if (jsonObj == null) {
      if (VatType.openapiRequiredFields.isEmpty()) {
        return;
      } else { // has required fields
        throw new IllegalArgumentException(
            String.format(
                "The required field(s) %s in VatType is not found in the empty JSON string",
                VatType.openapiRequiredFields.toString()));
      }
    }

    Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
    // check to see if the JSON string contains additional fields
    for (Entry<String, JsonElement> entry : entries) {
      if (!VatType.openapiFields.contains(entry.getKey())) {
        throw new IllegalArgumentException(
            String.format(
                "The field `%s` in the JSON string is not defined in the `VatType` properties. JSON: %s",
                entry.getKey(), jsonObj.toString()));
      }
    }
    if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull())
        && !jsonObj.get("description").isJsonPrimitive()) {
      throw new IllegalArgumentException(
          String.format(
              "Expected the field `description` to be a primitive type in the JSON string but got `%s`",
              jsonObj.get("description").toString()));
    }
    if ((jsonObj.get("notes") != null && !jsonObj.get("notes").isJsonNull())
        && !jsonObj.get("notes").isJsonPrimitive()) {
      throw new IllegalArgumentException(
          String.format(
              "Expected the field `notes` to be a primitive type in the JSON string but got `%s`",
              jsonObj.get("notes").toString()));
    }
    if ((jsonObj.get("ei_type") != null && !jsonObj.get("ei_type").isJsonNull())
        && !jsonObj.get("ei_type").isJsonPrimitive()) {
      throw new IllegalArgumentException(
          String.format(
              "Expected the field `ei_type` to be a primitive type in the JSON string but got `%s`",
              jsonObj.get("ei_type").toString()));
    }
    if ((jsonObj.get("ei_description") != null && !jsonObj.get("ei_description").isJsonNull())
        && !jsonObj.get("ei_description").isJsonPrimitive()) {
      throw new IllegalArgumentException(
          String.format(
              "Expected the field `ei_description` to be a primitive type in the JSON string but got `%s`",
              jsonObj.get("ei_description").toString()));
    }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
      if (!VatType.class.isAssignableFrom(type.getRawType())) {
        return null; // this class only serializes 'VatType' and its subtypes
      }
      final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
      final TypeAdapter<VatType> thisAdapter =
          gson.getDelegateAdapter(this, TypeToken.get(VatType.class));

      return (TypeAdapter<T>)
          new TypeAdapter<VatType>() {
            @Override
            public void write(JsonWriter out, VatType value) throws IOException {
              JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
              elementAdapter.write(out, obj);
            }

            @Override
            public VatType read(JsonReader in) throws IOException {
              JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
              validateJsonObject(jsonObj);
              return thisAdapter.fromJsonTree(jsonObj);
            }
          }.nullSafe();
    }
  }

  /**
   * Create an instance of VatType given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of VatType
   * @throws IOException if the JSON string is invalid with respect to VatType
   */
  public static VatType fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, VatType.class);
  }

  /**
   * Convert an instance of VatType to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
