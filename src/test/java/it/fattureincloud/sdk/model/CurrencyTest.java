/*
 * Fatture in Cloud API v2 - API Reference
 * Connect your software with Fatture in Cloud, the invoicing platform chosen by more than 400.000 businesses in Italy.   The Fatture in Cloud API is based on REST, and makes possible to interact with the user related data prior authorization via OAuth2 protocol.
 *
 * The version of the OpenAPI document: 2.0.11
 * Contact: info@fattureincloud.it
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package it.fattureincloud.sdk.model;

import static org.junit.jupiter.api.Assertions.*;

import com.google.gson.Gson;
import it.fattureincloud.sdk.JSON;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

/** Model tests for Currency */
public class CurrencyTest {
  private Currency model;

  @BeforeEach
  public void init() {
    model = new Currency();
  }

  /** Model tests for Currency */
  @Test
  public void testCurrency() {
    Currency c = new Currency().id("EUR").symbol("€").exchangeRate("1.00000").htmlSymbol("&euro;");

    JSON jsonManager = new JSON();
    Gson gson = jsonManager.getGson();
    String json = gson.toJson(c);
    String str =
        "{\"id\":\"EUR\",\"symbol\":\"€\",\"exchange_rate\":\"1.00000\",\"html_symbol\":\"\\u0026euro;\"}";
    assertEquals(str, json);
    Currency generated = gson.fromJson(str, Currency.class);
    assertEquals(c, generated);

    Object o = model;
    assertEquals(model, o);
    assertFalse(model.equals(null));
    assertFalse(model.equals(Integer.getInteger("5")));
  }

  /** Test the property 'id' */
  @Test
  public void idTest() {
    assertNull(model.getId());
    model.setId("PLN");
    assertEquals("PLN", model.getId());

    Currency c = model.id("EUR");
    Currency expected = new Currency();
    expected.setId("EUR");
    assertEquals(expected, c);
  }

  /** Test the property 'symbol' */
  @Test
  public void symbolTest() {
    assertNull(model.getSymbol());
    model.setSymbol("zł");
    assertEquals("zł", model.getSymbol());

    Currency c = model.symbol("€");
    Currency expected = new Currency();
    expected.setSymbol("€");
    assertEquals(expected, c);
  }

  /** Test the property 'exchangeRate' */
  @Test
  public void exchangeRateTest() {
    assertNull(model.getExchangeRate());
    model.setExchangeRate("4.62800");
    assertEquals("4.62800", model.getExchangeRate());

    Currency c = model.exchangeRate("1.00000");
    Currency expected = new Currency();
    expected.setExchangeRate("1.00000");
    assertEquals(expected, c);
  }

  /** Test the property 'htmlSymbol' */
  @Test
  public void htmlSymbolTest() {
    assertNull(model.getHtmlSymbol());
    model.setHtmlSymbol("&curren;");
    assertEquals("&curren;", model.getHtmlSymbol());

    Currency c = model.htmlSymbol("&euro;");
    Currency expected = new Currency();
    expected.setHtmlSymbol("&euro;");
    assertEquals(expected, c);
  }
}
