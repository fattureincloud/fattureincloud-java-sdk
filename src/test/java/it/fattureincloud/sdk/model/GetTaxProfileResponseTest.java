/*
 * Fatture in Cloud API v2 - API Reference
 * Connect your software with Fatture in Cloud, the invoicing platform chosen by more than 500.000 businesses in Italy.   The Fatture in Cloud API is based on REST, and makes possible to interact with the user related data prior authorization via OAuth2 protocol.
 *
 * The version of the OpenAPI document: 2.1.3
 * Contact: info@fattureincloud.it
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package it.fattureincloud.sdk.model;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertFalse;

import com.google.gson.Gson;
import it.fattureincloud.sdk.JSON;
import java.math.BigDecimal;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

/**
 * Model tests for GetTaxProfileResponse
 */
public class GetTaxProfileResponseTest {
    private GetTaxProfileResponse model;

    @BeforeEach
    public void init() {
        model = new GetTaxProfileResponse()
            .data(new TaxProfile()
                .companyType("individual")
                .companySubtype("artigiani")
                .profession("profession")
                .regime("forfettario_5")
                .rivalsaName("")
                .defaultRivalsa(new BigDecimal(0))
                .cassaName("")
                .defaultCassa(new BigDecimal(0))
                .defaultCassaTaxable(new BigDecimal(0))
                .cassa2Name("")
                .defaultCassa2(new BigDecimal(0))
                .defaultCassa2Taxable(new BigDecimal(0))
                .defaultWithholdingTax(new BigDecimal(0))
                .defaultWithholdingTaxTaxable(new BigDecimal(100))
                .defaultOtherWithholdingTax(new BigDecimal(0))
                .enasarco(false)
                .enasarcoType("enasarcoType")
                .contributionsPercentage(new BigDecimal(0))
                .profitCoefficient(new BigDecimal(0))
                .med(false)
                .defaultVat(new VatType().id(66).value(new BigDecimal(0)).description("Contribuenti forfettari").notes("Operazione non soggetta a IVA ai sensi dell'art. 1, commi 54-89, Legge n. 190/2014 e succ. modifiche/integrazioni").eInvoice(true).eiType("2.2").eiDescription("Non soggetta art. 1/54-89 L. 190/2014 e succ. modifiche/integrazioni").isDisabled(false))
            );
  }

    /**
     * Model tests for GetTaxProfileResponse
     */
    @Test
    public void testGetTaxProfileResponse() {
        JSON jsonManager = new JSON();
        Gson gson = jsonManager.getGson();
        String json = gson.toJson(model);
        String str = "{\"data\":{\"company_type\":\"individual\",\"company_subtype\":\"artigiani\",\"profession\":\"profession\",\"regime\":\"forfettario_5\",\"rivalsa_name\":\"\",\"default_rivalsa\":0,\"cassa_name\":\"\",\"default_cassa\":0,\"default_cassa_taxable\":0,\"cassa2_name\":\"\",\"default_cassa2\":0,\"default_cassa2_taxable\":0,\"default_withholding_tax\":0,\"default_withholding_tax_taxable\":100,\"default_other_withholding_tax\":0,\"enasarco\":false,\"enasarco_type\":\"enasarcoType\",\"contributions_percentage\":0,\"profit_coefficient\":0,\"med\":false,\"default_vat\":{\"id\":66,\"value\":0,\"description\":\"Contribuenti forfettari\",\"notes\":\"Operazione non soggetta a IVA ai sensi dell\\u0027art. 1, commi 54-89, Legge n. 190/2014 e succ. modifiche/integrazioni\",\"e_invoice\":true,\"ei_type\":\"2.2\",\"ei_description\":\"Non soggetta art. 1/54-89 L. 190/2014 e succ. modifiche/integrazioni\",\"is_disabled\":false}}}";
        assertEquals(str, json);
        GetTaxProfileResponse generated = gson.fromJson(str, GetTaxProfileResponse.class);
        assertEquals(model, generated);

        Object o = model;
        assertEquals(model, o);
        assertFalse(model.equals(null));
        assertFalse(model.equals(Integer.getInteger("5")));
    }

    /**
     * Test the property 'data'
     */
    @Test
    public void dataTest() {
        assertEquals("individual", model.getData().getCompanyType());
        model.setData(new TaxProfile().companyType("company"));
        assertEquals("company", model.getData().getCompanyType());

        model.data(new TaxProfile().companyType("individual"));
        GetTaxProfileResponse actual = new GetTaxProfileResponse();
        actual.setData(new TaxProfile().companyType("individual"));
        assertEquals(model, actual);
    }

}
