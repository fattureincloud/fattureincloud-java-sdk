/*
 * Fatture in Cloud API v2 - API Reference
 * Connect your software with Fatture in Cloud, the invoicing platform chosen by more than 400.000 businesses in Italy.   The Fatture in Cloud API is based on REST, and makes possible to interact with the user related data prior authorization via OAuth2 protocol.
 *
 * The version of the OpenAPI document: 2.0.7
 * Contact: info@fattureincloud.it
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package it.fattureincloud.sdk.model;

import com.google.gson.Gson;
import it.fattureincloud.sdk.JSON;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.math.BigDecimal;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertFalse;


/**
 * Model tests for CashbookEntryInData
 */
public class CashbookEntryInDataTest {
    private CashbookEntryInData model;

    @BeforeEach
    public void init() {
        model = new CashbookEntryInData()
                .amountIn(BigDecimal.valueOf(10))
                .paymentAccountIn(new PaymentAccount()
                        .id(21)
                        .name("Indesa - Carta conto")
                        .type(PaymentAccountType.STANDARD)
                        .iban("IT84Y0300203280294126225888")
                        .sia("sai")
                        .cuc("cuc")
                        .virtual(false));
    }

    /**
     * Model tests for CashbookEntryInData
     */
    @Test
    public void testCashbookEntryInData() {
        JSON jsonManager = new JSON();
        Gson gson = jsonManager.getGson();
        String json = gson.toJson(model);
        String str = "{\"amount_in\":10,\"payment_account_in\":{\"id\":21,\"name\":\"Indesa - Carta conto\",\"type\":\"standard\",\"iban\":\"IT84Y0300203280294126225888\",\"sia\":\"sai\",\"cuc\":\"cuc\",\"virtual\":false}}";
        assertEquals(str, json);
        CashbookEntryInData generated = gson.fromJson(str, CashbookEntryInData.class);
        assertEquals(model, generated);

        Object o = model;
        assertEquals(model, o);
        assertFalse(model.equals(null));
        assertFalse(model.equals(Integer.getInteger("5")));
    }

    /**
     * Test the property 'amountIn'
     */
    @Test
    public void amountInTest() {
        assertEquals(BigDecimal.valueOf(10), model.getAmountIn());
        model.setAmountIn(BigDecimal.valueOf(22));
        assertEquals(BigDecimal.valueOf(22), model.getAmountIn());

        CashbookEntryInData c = model.amountIn(BigDecimal.valueOf(23));
        CashbookEntryInData expected = new CashbookEntryInData()
                .amountIn(BigDecimal.valueOf(23))
                .paymentAccountIn(new PaymentAccount()
                        .id(21)
                        .name("Indesa - Carta conto")
                        .type(PaymentAccountType.STANDARD)
                        .iban("IT84Y0300203280294126225888")
                        .sia("sai")
                        .cuc("cuc")
                        .virtual(false));
        assertEquals(expected, c);
    }

    /**
     * Test the property 'paymentAccountIn'
     */
    @Test
    public void paymentAccountInTest() {
        PaymentAccount p1 = new PaymentAccount()
                .id(21)
                .name("Indesa - Carta conto")
                .type(PaymentAccountType.STANDARD)
                .iban("IT84Y0300203280294126225888")
                .sia("sai")
                .cuc("cuc")
                .virtual(false);

        PaymentAccount p2 = new PaymentAccount()
                .id(22)
                .name("UniPirl - Carta conto")
                .type(PaymentAccountType.STANDARD)
                .iban("IT84Y0300203280294126225888")
                .sia("sai")
                .cuc("cuc")
                .virtual(false);

        PaymentAccount p3 = new PaymentAccount()
                .id(23)
                .name("A Monte - Carta conto")
                .type(PaymentAccountType.STANDARD)
                .iban("IT84Y0300203280294126225888")
                .sia("sai")
                .cuc("cuc")
                .virtual(false);

        assertEquals(p1, model.getPaymentAccountIn());
        model.setPaymentAccountIn(p2);
        assertEquals(p2, model.getPaymentAccountIn());

        CashbookEntryInData c = model.paymentAccountIn(p3);
        CashbookEntryInData expected = new CashbookEntryInData()
                .amountIn(BigDecimal.valueOf(10))
                .paymentAccountIn(p3);
        assertEquals(expected, c);
    }

}
