/*
 * Fatture in Cloud API v2 - API Reference
 * Connect your software with Fatture in Cloud, the invoicing platform chosen by more than 500.000 businesses in Italy.   The Fatture in Cloud API is based on REST, and makes possible to interact with the user related data prior authorization via OAuth2 protocol.
 *
 * The version of the OpenAPI document: 2.1.5
 * Contact: info@fattureincloud.it
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package it.fattureincloud.sdk.model;

import com.google.gson.Gson;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

import it.fattureincloud.sdk.JSON;
import it.fattureincloud.sdk.model.PriceListPricesType;
import it.fattureincloud.sdk.model.PriceListType;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertFalse;

import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * Model tests for PriceList
 */
public class PriceListTest {
    private PriceList model;

    @BeforeEach
    public void init() {
        model =
            new PriceList()
                .id("10")
                .name("Listino 1")
                .pricesType(PriceListPricesType.NET)
                .isDefault(true)
                .validFrom("2023-01-01")
                .validTo("2023-12-31")
                .type(PriceListType.SELL);
    }

    /**
     * Model tests for PriceList
     */
    @Test
    public void testPriceListItem() {
        JSON jsonManager = new JSON();
        Gson gson = jsonManager.getGson();
        String json = gson.toJson(model);
        String str =
            "{\"id\":\"10\",\"name\":\"Listino 1\",\"prices_type\":\"net\",\"is_default\":true,\"valid_from\":\"2023-01-01\",\"valid_to\":\"2023-12-31\",\"type\":\"sell\"}";
        assertEquals(str, json);
        PriceList generated = gson.fromJson(str, PriceList.class);
        assertEquals(model, generated);

        Object o = model;
        assertEquals(model, o);
        assertFalse(model.equals(null));
        assertFalse(model.equals(Integer.getInteger("5")));
    }

    /**
     * Test the property 'id'
     */
    @Test
    public void idTest() {
        assertEquals(model.getId(), "10");
        model.setId("11");
        assertEquals(model.getId(), "11");
        PriceList a = model.id("10");
        PriceList expected =
            new PriceList()
                .id("10")
                .name("Listino 1")
                .pricesType(PriceListPricesType.NET)
                .isDefault(true)
                .validFrom("2023-01-01")
                .validTo("2023-12-31")
                .type(PriceListType.SELL);
        assertEquals(expected, a);
    }

    /**
     * Test the property 'name'
     */
    @Test
    public void nameTest() {
        assertEquals(model.getName(), "Listino 1");
        model.setName("Listino 2");
        assertEquals(model.getName(), "Listino 2");
        PriceList a = model.name("Listino 1");
        PriceList expected =
            new PriceList()
                .id("10")
                .name("Listino 1")
                .pricesType(PriceListPricesType.NET)
                .isDefault(true)
                .validFrom("2023-01-01")
                .validTo("2023-12-31")
                .type(PriceListType.SELL);
        assertEquals(expected, a);
    }

    /**
     * Test the property 'pricesType'
     */
    @Test
    public void pricesTypeTest() {
        assertEquals(model.getPricesType(), PriceListPricesType.NET);
        model.setPricesType(PriceListPricesType.GROSS);
        assertEquals(model.getPricesType(), PriceListPricesType.GROSS);
        PriceList a = model.pricesType(PriceListPricesType.NET);
        PriceList expected =
            new PriceList()
                .id("10")
                .name("Listino 1")
                .pricesType(PriceListPricesType.NET)
                .isDefault(true)
                .validFrom("2023-01-01")
                .validTo("2023-12-31")
                .type(PriceListType.SELL);
        assertEquals(expected, a);
    }

    /**
     * Test the property 'isDefault'
     */
    @Test
    public void isDefaultTest() {
        assertEquals(model.getIsDefault(), true);
        model.setIsDefault(false);
        assertEquals(model.getIsDefault(), false);
        PriceList a = model.isDefault(true);
        PriceList expected =
            new PriceList()
                .id("10")
                .name("Listino 1")
                .pricesType(PriceListPricesType.NET)
                .isDefault(true)
                .validFrom("2023-01-01")
                .validTo("2023-12-31")
                .type(PriceListType.SELL);
        assertEquals(expected, a);
    }

    /**
     * Test the property 'validFrom'
     */
    @Test
    public void validFromTest() {
        assertEquals(model.getValidFrom(), "2023-01-01");
        model.setValidFrom("2023-02-01");
        assertEquals(model.getValidFrom(), "2023-02-01");
        PriceList a = model.validFrom("2023-01-01");
        PriceList expected =
            new PriceList()
                .id("10")
                .name("Listino 1")
                .pricesType(PriceListPricesType.NET)
                .isDefault(true)
                .validFrom("2023-01-01")
                .validTo("2023-12-31")
                .type(PriceListType.SELL);
        assertEquals(expected, a);
    }

    /**
     * Test the property 'validTo'
     */
    @Test
    public void validToTest() {
        assertEquals(model.getValidTo(), "2023-12-31");
        model.setValidTo("2024-01-01");
        assertEquals(model.getValidTo(), "2024-01-01");
        PriceList a = model.validTo("2023-12-31");
        PriceList expected =
            new PriceList()
                .id("10")
                .name("Listino 1")
                .pricesType(PriceListPricesType.NET)
                .isDefault(true)
                .validFrom("2023-01-01")
                .validTo("2023-12-31")
                .type(PriceListType.SELL);
        assertEquals(expected, a);
    }

    /**
     * Test the property 'type'
     */
    @Test
    public void typeTest() {
        assertEquals(model.getType(), PriceListType.SELL);
        model.setType(PriceListType.PURCHASE);
        assertEquals(model.getType(), PriceListType.PURCHASE);
        PriceList a = model.type(PriceListType.SELL);
        PriceList expected =
            new PriceList()
                .id("10")
                .name("Listino 1")
                .pricesType(PriceListPricesType.NET)
                .isDefault(true)
                .validFrom("2023-01-01")
                .validTo("2023-12-31")
                .type(PriceListType.SELL);
        assertEquals(expected, a);
    }

}
