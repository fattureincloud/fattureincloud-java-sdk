/*
 * Fatture in Cloud API v2 - API Reference
 * Connect your software with Fatture in Cloud, the invoicing platform chosen by more than 400.000 businesses in Italy.   The Fatture in Cloud API is based on REST, and makes possible to interact with the user related data prior authorization via OAuth2 protocol.
 *
 * The version of the OpenAPI document: 2.0.7
 * Contact: info@fattureincloud.it
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package it.fattureincloud.sdk.model;

import com.google.gson.Gson;
import it.fattureincloud.sdk.JSON;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.math.BigDecimal;
import java.time.LocalDate;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertFalse;


/**
 * Model tests for F24
 */
public class F24Test {
    private F24 model;

    @BeforeEach
    public void init() {
        model = new F24()
                .id(2)
                .dueDate(LocalDate.of(2021, 12, 25))
                .status(F24Status.NOT_PAID)
                .paymentAccount(new PaymentAccount().id(1))
                .amount(BigDecimal.valueOf(10))
                .attachmentToken("1234567890")
                .description("descr");
    }

    /**
     * Model tests for F24
     */
    @Test
    public void testF24() {
        JSON jsonManager = new JSON();
        Gson gson = jsonManager.getGson();
        String json = gson.toJson(model);
        String str = "{\"id\":2,\"due_date\":\"2021-12-25\",\"status\":\"not_paid\",\"payment_account\":{\"id\":1,\"type\":\"standard\"},\"amount\":10,\"attachment_token\":\"1234567890\",\"description\":\"descr\"}";
        assertEquals(str, json);
        F24 generated = gson.fromJson(str, F24.class);
        assertEquals(model, generated);

        Object o = model;
        assertEquals(model, o);
        assertFalse(model.equals(null));
        assertFalse(model.equals(Integer.getInteger("5")));
    }

    /**
     * Test the property 'id'
     */
    @Test
    public void idTest() {
        assertEquals(2, model.getId());
        model.setId(1);
        assertEquals(1, model.getId());

        F24 a = model.id(2);
        F24 expected = new F24()
                .id(2)
                .dueDate(LocalDate.of(2021, 12, 25))
                .status(F24Status.NOT_PAID)
                .paymentAccount(new PaymentAccount().id(1))
                .amount(BigDecimal.valueOf(10))
                .attachmentToken("1234567890")
                .description("descr");
        assertEquals(expected, a);
    }

    /**
     * Test the property 'dueDate'
     */
    @Test
    public void dueDateTest() {
        assertEquals(LocalDate.of(2021, 12, 25), model.getDueDate());
        model.setDueDate(LocalDate.of(2021, 12, 26));
        assertEquals(LocalDate.of(2021, 12, 26), model.getDueDate());

        F24 a = model.dueDate(LocalDate.of(2021, 12, 25));
        F24 expected = new F24()
                .id(2)
                .dueDate(LocalDate.of(2021, 12, 25))
                .status(F24Status.NOT_PAID)
                .paymentAccount(new PaymentAccount().id(1))
                .amount(BigDecimal.valueOf(10))
                .attachmentToken("1234567890")
                .description("descr");
        assertEquals(expected, a);
    }

    /**
     * Test the property 'status'
     */
    @Test
    public void statusTest() {
        assertEquals(F24Status.NOT_PAID, model.getStatus());
        model.setStatus(F24Status.PAID);
        assertEquals(F24Status.PAID, model.getStatus());

        F24 a = model.status(F24Status.NOT_PAID);
        F24 expected = new F24()
                .id(2)
                .dueDate(LocalDate.of(2021, 12, 25))
                .status(F24Status.NOT_PAID)
                .paymentAccount(new PaymentAccount().id(1))
                .amount(BigDecimal.valueOf(10))
                .attachmentToken("1234567890")
                .description("descr");
        assertEquals(expected, a);
    }

    /**
     * Test the property 'paymentAccount'
     */
    @Test
    public void paymentAccountTest() {
        assertEquals(F24Status.NOT_PAID, model.getStatus());
        model.setStatus(F24Status.PAID);
        assertEquals(F24Status.PAID, model.getStatus());

        F24 a = model.status(F24Status.NOT_PAID);
        F24 expected = new F24()
                .id(2)
                .dueDate(LocalDate.of(2021, 12, 25))
                .status(F24Status.NOT_PAID)
                .paymentAccount(new PaymentAccount().id(1))
                .amount(BigDecimal.valueOf(10))
                .attachmentToken("1234567890")
                .description("descr");
        assertEquals(expected, a);
    }

    /**
     * Test the property 'amount'
     */
    @Test
    public void amountTest() {
        assertEquals(BigDecimal.valueOf(10), model.getAmount());
        model.setAmount(BigDecimal.valueOf(1));
        assertEquals(BigDecimal.valueOf(1), model.getAmount());

        F24 a = model.amount(BigDecimal.valueOf(10));
        F24 expected = new F24()
                .id(2)
                .dueDate(LocalDate.of(2021, 12, 25))
                .status(F24Status.NOT_PAID)
                .paymentAccount(new PaymentAccount().id(1))
                .amount(BigDecimal.valueOf(10))
                .attachmentToken("1234567890")
                .description("descr");
        assertEquals(expected, a);
    }

    /**
     * Test the property 'attachmentUrl'
     */
    @Test
    public void attachmentUrlTest() {
        JSON jsonManager = new JSON();
        Gson gson = jsonManager.getGson();
        String json = "{\"id\":2,\"due_date\":\"2021-12-25\",\"status\":\"not_paid\",\"payment_account\":{\"id\":1,\"type\":\"standard\"},\"amount\":10,\"attachment_token\":\"1234567890\",\"attachment_url\":\"www.attachment.url\",\"description\":\"descr\"}";
        F24 generated = gson.fromJson(json, F24.class);

        assertEquals("www.attachment.url", generated.getAttachmentUrl());
    }

    /**
     * Test the property 'attachmentToken'
     */
    @Test
    public void attachmentTokenTest() {
        assertEquals("1234567890", model.getAttachmentToken());
        model.setAttachmentToken("98765432");
        assertEquals("98765432", model.getAttachmentToken());

        F24 a = model.attachmentToken("1234567890");
        F24 expected = new F24()
                .id(2)
                .dueDate(LocalDate.of(2021, 12, 25))
                .status(F24Status.NOT_PAID)
                .paymentAccount(new PaymentAccount().id(1))
                .amount(BigDecimal.valueOf(10))
                .attachmentToken("1234567890")
                .description("descr");
        assertEquals(expected, a);
    }

    /**
     * Test the property 'description'
     */
    @Test
    public void descriptionTest() {
        assertEquals("descr", model.getDescription());
        model.setDescription("descr2");
        assertEquals("descr2", model.getDescription());

        F24 a = model.description("descr");
        F24 expected = new F24()
                .id(2)
                .dueDate(LocalDate.of(2021, 12, 25))
                .status(F24Status.NOT_PAID)
                .paymentAccount(new PaymentAccount().id(1))
                .amount(BigDecimal.valueOf(10))
                .attachmentToken("1234567890")
                .description("descr");
        assertEquals(expected, a);
    }

}
