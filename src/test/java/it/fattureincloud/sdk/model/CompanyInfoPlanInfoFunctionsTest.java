/*
 * Fatture in Cloud API v2 - API Reference
 * Connect your software with Fatture in Cloud, the invoicing platform chosen by more than 400.000 businesses in Italy.   The Fatture in Cloud API is based on REST, and makes possible to interact with the user related data prior authorization via OAuth2 protocol.
 *
 * The version of the OpenAPI document: 2.0.7
 * Contact: info@fattureincloud.it
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package it.fattureincloud.sdk.model;

import com.google.gson.Gson;
import it.fattureincloud.sdk.JSON;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;


/**
 * Model tests for CompanyInfoPlanInfoFunctions
 */
public class CompanyInfoPlanInfoFunctionsTest {
    private CompanyInfoPlanInfoFunctions model;

    @BeforeEach
    public void init() {
        model = new CompanyInfoPlanInfoFunctions();
    }

    /**
     * Model tests for CompanyInfoPlanInfoFunctions
     */
    @Test
    public void testCompanyInfoPlanInfoFunctions() {
        CompanyInfoPlanInfoFunctions c = new CompanyInfoPlanInfoFunctions()
                .documentAttachments(true)
                .archive(true)
                .paymentNotifications(true)
                .paypal(true)
                .receipts(true)
                .eInvoice(true)
                .genius(true)
                .stock(true)
                .smtp(true)
                .mailTracking(true)
                .subaccounts(true)
                .tesseraSanitaria(true)
                .recurring(true)
                .sofort(false)
                .cerved(true)
                .tsDigital(true)
                .tsPay(true)
                .tsInvoiceTrading(true);

        JSON jsonManager = new JSON();
        Gson gson = jsonManager.getGson();
        String json = gson.toJson(c);
        String str = "{\"archive\":true,\"cerved\":true,\"document_attachments\":true,\"e_invoice\":true,\"genius\":true,\"mail_tracking\":true,\"payment_notifications\":true,\"paypal\":true,\"receipts\":true,\"recurring\":true,\"smtp\":true,\"sofort\":false,\"stock\":true,\"subaccounts\":true,\"tessera_sanitaria\":true,\"ts_digital\":true,\"ts_invoice_trading\":true,\"ts_pay\":true}";
        assertEquals(str, json);
        CompanyInfoPlanInfoFunctions generated = gson.fromJson(str, CompanyInfoPlanInfoFunctions.class);
        assertEquals(c, generated);

        Object o = model;
        assertEquals(model, o);
        assertFalse(model.equals(null));
        assertFalse(model.equals(Integer.getInteger("5")));
    }

    /**
     * Test the property 'archive'
     */
    @Test
    public void archiveTest() {
        assertNull(model.getArchive());
        model.setArchive(true);
        assertEquals(true, model.getArchive());

        CompanyInfoPlanInfoFunctions c = model.archive(false);
        CompanyInfoPlanInfoFunctions expected = new CompanyInfoPlanInfoFunctions();
        expected.setArchive(false);
        assertEquals(expected, c);
    }

    /**
     * Test the property 'cerved'
     */
    @Test
    public void cervedTest() {
        assertNull(model.getCerved());
        model.setCerved(true);
        assertEquals(true, model.getCerved());

        CompanyInfoPlanInfoFunctions c = model.cerved(false);
        CompanyInfoPlanInfoFunctions expected = new CompanyInfoPlanInfoFunctions();
        expected.setCerved(false);
        assertEquals(expected, c);
    }

    /**
     * Test the property 'documentAttachments'
     */
    @Test
    public void documentAttachmentsTest() {
        assertNull(model.getDocumentAttachments());
        model.setDocumentAttachments(true);
        assertEquals(true, model.getDocumentAttachments());

        CompanyInfoPlanInfoFunctions c = model.documentAttachments(false);
        CompanyInfoPlanInfoFunctions expected = new CompanyInfoPlanInfoFunctions();
        expected.setDocumentAttachments(false);
        assertEquals(expected, c);
    }

    /**
     * Test the property 'eInvoice'
     */
    @Test
    public void eInvoiceTest() {
        assertNull(model.geteInvoice());
        model.seteInvoice(true);
        assertEquals(true, model.geteInvoice());

        CompanyInfoPlanInfoFunctions c = model.eInvoice(false);
        CompanyInfoPlanInfoFunctions expected = new CompanyInfoPlanInfoFunctions();
        expected.seteInvoice(false);
        assertEquals(expected, c);
    }

    /**
     * Test the property 'genius'
     */
    @Test
    public void geniusTest() {
        assertNull(model.getGenius());
        model.setGenius(true);
        assertEquals(true, model.getGenius());

        CompanyInfoPlanInfoFunctions c = model.genius(false);
        CompanyInfoPlanInfoFunctions expected = new CompanyInfoPlanInfoFunctions();
        expected.setGenius(false);
        assertEquals(expected, c);
    }

    /**
     * Test the property 'mailTracking'
     */
    @Test
    public void mailTrackingTest() {
        assertNull(model.getMailTracking());
        model.setMailTracking(true);
        assertEquals(true, model.getMailTracking());

        CompanyInfoPlanInfoFunctions c = model.mailTracking(false);
        CompanyInfoPlanInfoFunctions expected = new CompanyInfoPlanInfoFunctions();
        expected.setMailTracking(false);
        assertEquals(expected, c);
    }

    /**
     * Test the property 'paymentNotifications'
     */
    @Test
    public void paymentNotificationsTest() {
        assertNull(model.getPaymentNotifications());
        model.setPaymentNotifications(true);
        assertEquals(true, model.getPaymentNotifications());

        CompanyInfoPlanInfoFunctions c = model.paymentNotifications(false);
        CompanyInfoPlanInfoFunctions expected = new CompanyInfoPlanInfoFunctions();
        expected.setPaymentNotifications(false);
        assertEquals(expected, c);
    }

    /**
     * Test the property 'paypal'
     */
    @Test
    public void paypalTest() {
        assertNull(model.getPaypal());
        model.setPaypal(true);
        assertEquals(true, model.getPaypal());

        CompanyInfoPlanInfoFunctions c = model.paypal(false);
        CompanyInfoPlanInfoFunctions expected = new CompanyInfoPlanInfoFunctions();
        expected.setPaypal(false);
        assertEquals(expected, c);
    }

    /**
     * Test the property 'receipts'
     */
    @Test
    public void receiptsTest() {
        assertNull(model.getReceipts());
        model.setReceipts(true);
        assertEquals(true, model.getReceipts());

        CompanyInfoPlanInfoFunctions c = model.receipts(false);
        CompanyInfoPlanInfoFunctions expected = new CompanyInfoPlanInfoFunctions();
        expected.setReceipts(false);
        assertEquals(expected, c);
    }

    /**
     * Test the property 'recurring'
     */
    @Test
    public void recurringTest() {
        assertNull(model.getRecurring());
        model.setRecurring(true);
        assertEquals(true, model.getRecurring());

        CompanyInfoPlanInfoFunctions c = model.recurring(false);
        CompanyInfoPlanInfoFunctions expected = new CompanyInfoPlanInfoFunctions();
        expected.setRecurring(false);
        assertEquals(expected, c);
    }

    /**
     * Test the property 'smtp'
     */
    @Test
    public void smtpTest() {
        assertNull(model.getSmtp());
        model.setSmtp(true);
        assertEquals(true, model.getSmtp());

        CompanyInfoPlanInfoFunctions c = model.smtp(false);
        CompanyInfoPlanInfoFunctions expected = new CompanyInfoPlanInfoFunctions();
        expected.setSmtp(false);
        assertEquals(expected, c);
    }

    /**
     * Test the property 'sofort'
     */
    @Test
    public void sofortTest() {
        assertNull(model.getSofort());
        model.setSofort(true);
        assertEquals(true, model.getSofort());

        CompanyInfoPlanInfoFunctions c = model.sofort(false);
        CompanyInfoPlanInfoFunctions expected = new CompanyInfoPlanInfoFunctions();
        expected.setSofort(false);
        assertEquals(expected, c);
    }

    /**
     * Test the property 'stock'
     */
    @Test
    public void stockTest() {
        assertNull(model.getStock());
        model.setStock(true);
        assertEquals(true, model.getStock());

        CompanyInfoPlanInfoFunctions c = model.stock(false);
        CompanyInfoPlanInfoFunctions expected = new CompanyInfoPlanInfoFunctions();
        expected.setStock(false);
        assertEquals(expected, c);
    }

    /**
     * Test the property 'subaccounts'
     */
    @Test
    public void subaccountsTest() {
        assertNull(model.getSubaccounts());
        model.setSubaccounts(true);
        assertEquals(true, model.getSubaccounts());

        CompanyInfoPlanInfoFunctions c = model.subaccounts(false);
        CompanyInfoPlanInfoFunctions expected = new CompanyInfoPlanInfoFunctions();
        expected.setSubaccounts(false);
        assertEquals(expected, c);
    }

    /**
     * Test the property 'tesseraSanitaria'
     */
    @Test
    public void tesseraSanitariaTest() {
        assertNull(model.getTesseraSanitaria());
        model.setTesseraSanitaria(true);
        assertEquals(true, model.getTesseraSanitaria());

        CompanyInfoPlanInfoFunctions c = model.tesseraSanitaria(false);
        CompanyInfoPlanInfoFunctions expected = new CompanyInfoPlanInfoFunctions();
        expected.setTesseraSanitaria(false);
        assertEquals(expected, c);
    }

    /**
     * Test the property 'tsDigital'
     */
    @Test
    public void tsDigitalTest() {
        assertNull(model.getTsDigital());
        model.setTsDigital(true);
        assertEquals(true, model.getTsDigital());

        CompanyInfoPlanInfoFunctions c = model.tsDigital(false);
        CompanyInfoPlanInfoFunctions expected = new CompanyInfoPlanInfoFunctions();
        expected.setTsDigital(false);
        assertEquals(expected, c);
    }

    /**
     * Test the property 'tsInvoiceTrading'
     */
    @Test
    public void tsInvoiceTradingTest() {
        assertNull(model.getTsInvoiceTrading());
        model.setTsInvoiceTrading(true);
        assertEquals(true, model.getTsInvoiceTrading());

        CompanyInfoPlanInfoFunctions c = model.tsInvoiceTrading(false);
        CompanyInfoPlanInfoFunctions expected = new CompanyInfoPlanInfoFunctions();
        expected.setTsInvoiceTrading(false);
        assertEquals(expected, c);
    }

    /**
     * Test the property 'tsPay'
     */
    @Test
    public void tsPayTest() {
        assertNull(model.getTsPay());
        model.setTsPay(true);
        assertEquals(true, model.getTsPay());

        CompanyInfoPlanInfoFunctions c = model.tsPay(false);
        CompanyInfoPlanInfoFunctions expected = new CompanyInfoPlanInfoFunctions();
        expected.setTsPay(false);
        assertEquals(expected, c);
    }

}
