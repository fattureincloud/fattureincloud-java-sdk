/*
 * Fatture in Cloud API v2 - API Reference
 * Connect your software with Fatture in Cloud, the invoicing platform chosen by more than 500.000 businesses in Italy.   The Fatture in Cloud API is based on REST, and makes possible to interact with the user related data prior authorization via OAuth2 protocol.
 *
 * The version of the OpenAPI document: 2.0.32
 * Contact: info@fattureincloud.it
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package it.fattureincloud.sdk.model;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertFalse;

import com.google.gson.Gson;
import it.fattureincloud.sdk.JSON;
import java.math.BigDecimal;
import java.time.LocalDate;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

/**
 * Model tests for GetCompanyPlanUsageResponse
 */
public class GetCompanyPlanUsageResponseTest {
    private GetCompanyPlanUsageResponse model;

    @BeforeEach
      public void init() {
        model =
            new GetCompanyPlanUsageResponse()
                .data(
                    new CompanyPlanUsage()
                        .limit(BigDecimal.valueOf(5.5))
                        .usage(BigDecimal.valueOf(7.5)));
      }

    /**
     * Model tests for GetCompanyPlanUsageResponse
     */
    @Test
    public void testGetCompanyPlanUsageResponse() {
        JSON jsonManager = new JSON();
        Gson gson = jsonManager.getGson();
        String json = gson.toJson(model);
        String str =
            "{\"data\":{\"limit\":5.5,\"usage\":7.5}}";
        assertEquals(str, json);
        GetCompanyPlanUsageResponse generated =
            gson.fromJson(str, GetCompanyPlanUsageResponse.class);
        assertEquals(model, generated);

        Object o = model;
        assertEquals(model, o);
        assertFalse(model.equals(null));
        assertFalse(model.equals(Integer.getInteger("5")));
    }

    /**
     * Test the property 'data'
     */
    @Test
    public void dataTest() {
        assertEquals(BigDecimal.valueOf(5.5), model.getData().getLimit());
        assertEquals(BigDecimal.valueOf(7.5), model.getData().getUsage());
        model.setData(new CompanyPlanUsage().limit(BigDecimal.valueOf(5.5)).usage(BigDecimal.valueOf(7.5)));
        assertEquals(BigDecimal.valueOf(5.5), model.getData().getLimit());
        assertEquals(BigDecimal.valueOf(7.5), model.getData().getUsage());

        model.data(new CompanyPlanUsage().limit(BigDecimal.valueOf(5.5)).usage(BigDecimal.valueOf(7.5)));
        GetCompanyPlanUsageResponse actual = new GetCompanyPlanUsageResponse();
        actual.setData(new CompanyPlanUsage().limit(BigDecimal.valueOf(5.5)).usage(BigDecimal.valueOf(7.5)));
        assertEquals(model, actual);
    }

}
