/*
 * Fatture in Cloud API v2 - API Reference
 * Connect your software with Fatture in Cloud, the invoicing platform chosen by more than 400.000 businesses in Italy.   The Fatture in Cloud API is based on REST, and makes possible to interact with the user related data prior authorization via OAuth2 protocol.
 *
 * The version of the OpenAPI document: 2.0.11
 * Contact: info@fattureincloud.it
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package it.fattureincloud.sdk.model;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertFalse;

import com.google.gson.Gson;
import it.fattureincloud.sdk.JSON;
import java.math.BigDecimal;
import java.time.LocalDate;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

/** Model tests for IssuedDocumentPaymentsListItem */
public class IssuedDocumentPaymentsListItemTest {
  private IssuedDocumentPaymentsListItem model;

  @BeforeEach
  public void init() {
    model =
        new IssuedDocumentPaymentsListItem()
            .dueDate(LocalDate.of(2021, 12, 25))
            .amount(BigDecimal.valueOf(10))
            .status(IssuedDocumentStatus.PAID)
            .paymentAccount(new PaymentAccount().id(1))
            .paidDate(LocalDate.of(2021, 12, 25))
            .eiRaw(null);
  }

  /** Model tests for IssuedDocumentPaymentsListItem */
  @Test
  public void testIssuedDocumentPaymentsListItem() {
    JSON jsonManager = new JSON();
    Gson gson = jsonManager.getGson();
    String json = gson.toJson(model);
    String str =
        "{\"due_date\":\"2021-12-25\",\"amount\":10,\"status\":\"paid\",\"payment_account\":{\"id\":1,\"type\":\"standard\"},\"paid_date\":\"2021-12-25\"}";
    assertEquals(str, json);
    IssuedDocumentPaymentsListItem generated =
        gson.fromJson(str, IssuedDocumentPaymentsListItem.class);
    assertEquals(model, generated);

    Object o = model;
    assertEquals(model, o);
    assertFalse(model.equals(null));
    assertFalse(model.equals(Integer.getInteger("5")));
  }

  /** Test the property 'dueDate' */
  @Test
  public void dueDateTest() {
    assertEquals(LocalDate.of(2021, 12, 25), model.getDueDate());
    model.setDueDate(LocalDate.of(2021, 12, 26));
    assertEquals(LocalDate.of(2021, 12, 26), model.getDueDate());

    IssuedDocumentPaymentsListItem i = model.dueDate(LocalDate.of(2021, 12, 25));
    IssuedDocumentPaymentsListItem expected =
        new IssuedDocumentPaymentsListItem()
            .dueDate(LocalDate.of(2021, 12, 25))
            .amount(BigDecimal.valueOf(10))
            .status(IssuedDocumentStatus.PAID)
            .paymentAccount(new PaymentAccount().id(1))
            .paidDate(LocalDate.of(2021, 12, 25))
            .eiRaw(null);
    assertEquals(expected, i);
  }

  /** Test the property 'amount' */
  @Test
  public void amountTest() {
    assertEquals(BigDecimal.valueOf(10), model.getAmount());
    model.setAmount(BigDecimal.valueOf(101));
    assertEquals(BigDecimal.valueOf(101), model.getAmount());

    IssuedDocumentPaymentsListItem i = model.amount(BigDecimal.valueOf(10));
    IssuedDocumentPaymentsListItem expected =
        new IssuedDocumentPaymentsListItem()
            .dueDate(LocalDate.of(2021, 12, 25))
            .amount(BigDecimal.valueOf(10))
            .status(IssuedDocumentStatus.PAID)
            .paymentAccount(new PaymentAccount().id(1))
            .paidDate(LocalDate.of(2021, 12, 25))
            .eiRaw(null);
    assertEquals(expected, i);
  }

  /** Test the property 'status' */
  @Test
  public void statusTest() {
    assertEquals(IssuedDocumentStatus.PAID, model.getStatus());
    model.setStatus(IssuedDocumentStatus.NOT_PAID);
    assertEquals(IssuedDocumentStatus.NOT_PAID, model.getStatus());

    IssuedDocumentPaymentsListItem i = model.status(IssuedDocumentStatus.PAID);
    IssuedDocumentPaymentsListItem expected =
        new IssuedDocumentPaymentsListItem()
            .dueDate(LocalDate.of(2021, 12, 25))
            .amount(BigDecimal.valueOf(10))
            .status(IssuedDocumentStatus.PAID)
            .paymentAccount(new PaymentAccount().id(1))
            .paidDate(LocalDate.of(2021, 12, 25))
            .eiRaw(null);
    assertEquals(expected, i);
  }

  /** Test the property 'paymentAccount' */
  @Test
  public void paymentAccountTest() {
    assertEquals(new PaymentAccount().id(1), model.getPaymentAccount());
    model.setPaymentAccount(new PaymentAccount().id(11));
    assertEquals(new PaymentAccount().id(11), model.getPaymentAccount());

    IssuedDocumentPaymentsListItem i = model.paymentAccount(new PaymentAccount().id(1));
    IssuedDocumentPaymentsListItem expected =
        new IssuedDocumentPaymentsListItem()
            .dueDate(LocalDate.of(2021, 12, 25))
            .amount(BigDecimal.valueOf(10))
            .status(IssuedDocumentStatus.PAID)
            .paymentAccount(new PaymentAccount().id(1))
            .paidDate(LocalDate.of(2021, 12, 25))
            .eiRaw(null);
    assertEquals(expected, i);
  }

  /** Test the property 'paidDate' */
  @Test
  public void paidDateTest() {
    assertEquals(LocalDate.of(2021, 12, 25), model.getPaidDate());
    model.setPaidDate(LocalDate.of(2021, 12, 26));
    assertEquals(LocalDate.of(2021, 12, 26), model.getPaidDate());

    IssuedDocumentPaymentsListItem i = model.paidDate(LocalDate.of(2021, 12, 25));
    IssuedDocumentPaymentsListItem expected =
        new IssuedDocumentPaymentsListItem()
            .dueDate(LocalDate.of(2021, 12, 25))
            .amount(BigDecimal.valueOf(10))
            .status(IssuedDocumentStatus.PAID)
            .paymentAccount(new PaymentAccount().id(1))
            .paidDate(LocalDate.of(2021, 12, 25))
            .eiRaw(null);
    assertEquals(expected, i);
  }

  /** Test the property 'eiRaw' */
  @Test
  public void eiRawTest() {
    assertEquals(null, model.getEiRaw());
    model.setEiRaw(false);
    assertEquals(false, model.getEiRaw());

    IssuedDocumentPaymentsListItem i = model.eiRaw(null);
    IssuedDocumentPaymentsListItem expected =
        new IssuedDocumentPaymentsListItem()
            .dueDate(LocalDate.of(2021, 12, 25))
            .amount(BigDecimal.valueOf(10))
            .status(IssuedDocumentStatus.PAID)
            .paymentAccount(new PaymentAccount().id(1))
            .paidDate(LocalDate.of(2021, 12, 25))
            .eiRaw(null);
    assertEquals(expected, i);
  }
}
