/*
 * Fatture in Cloud API v2 - API Reference
 * Connect your software with Fatture in Cloud, the invoicing platform chosen by more than 400.000 businesses in Italy.   The Fatture in Cloud API is based on REST, and makes possible to interact with the user related data prior authorization via OAuth2 protocol.
 *
 * The version of the OpenAPI document: 2.0.11
 * Contact: info@fattureincloud.it
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package it.fattureincloud.sdk.model;

import com.google.gson.Gson;
import it.fattureincloud.sdk.JSON;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.Arrays;

import static org.junit.jupiter.api.Assertions.*;


/**
 * Model tests for EmailData
 */
public class EmailDataTest {
    private final EmailData model = new EmailData();

    /**
     * Model tests for EmailData
     */
    @Test
    public void testEmailData() {
        EmailData e = new EmailData()
                .recipientEmail("mary.red@example.com")
                .recipientEmail("m.rossi@exxample.com")
                .subject("Nostra pro forma nr. 1")
                .body("Pro forma body")
                .documentExists(true)
                .deliveryNoteExists(false)
                .attachmentExists(false)
                .accompanyingInvoiceExists(false)
                .defaultAttachPdf(false)
                .defaultSenderEmail(new EmailDataDefaultSenderEmail()
                        .id(0)
                        .email("no-reply@fattureincloud.it")
                )
                .senderEmailsList(Arrays.asList(
                        new SenderEmail()
                                .id(0)
                                .email("no-reply@fattureincloud.it"),
                        new SenderEmail()
                                .id(888)
                                .email("mariorossi@fattureincloud.it")
                ));

        JSON jsonManager = new JSON();
        Gson gson = jsonManager.getGson();
        String json = gson.toJson(e);
        String str = "{\"recipient_email\":\"m.rossi@exxample.com\",\"default_sender_email\":{\"id\":0,\"email\":\"no-reply@fattureincloud.it\"},\"sender_emails_list\":[{\"id\":0,\"email\":\"no-reply@fattureincloud.it\"},{\"id\":888,\"email\":\"mariorossi@fattureincloud.it\"}],\"subject\":\"Nostra pro forma nr. 1\",\"body\":\"Pro forma body\",\"document_exists\":true,\"delivery_note_exists\":false,\"attachment_exists\":false,\"accompanying_invoice_exists\":false,\"default_attach_pdf\":false}";
        assertEquals(str, json);
        EmailData generated = gson.fromJson(str, EmailData.class);
        assertEquals(e, generated);

        Object o = model;
        assertEquals(model, o);
        assertFalse(model.equals(null));
        assertFalse(model.equals(Integer.getInteger("5")));
    }

    /**
     * Test the property 'recipientEmail'
     */
    @Test
    public void recipientEmailTest() {
        assertNull(model.getRecipientEmail());
        model.setRecipientEmail("no-reply@fattureincloud.it");
        assertEquals("no-reply@fattureincloud.it", model.getRecipientEmail());

        EmailData e = model.recipientEmail("info@fattureincloud.it");
        EmailData expected = new EmailData();
        expected.setRecipientEmail("info@fattureincloud.it");
        assertEquals(expected, e);
    }

    /**
     * Test the property 'defaultSenderEmail'
     */
    @Test
    public void defaultSenderEmailTest() {
        EmailDataDefaultSenderEmail e1 = new EmailDataDefaultSenderEmail()
                .id(1)
                .email("no-reply@fattureincloud.it");

        EmailDataDefaultSenderEmail e2 = new EmailDataDefaultSenderEmail()
                .id(2)
                .email("info@fattureincloud.it");

        assertNull(model.getDefaultSenderEmail());
        model.setDefaultSenderEmail(e1);
        assertEquals(e1, model.getDefaultSenderEmail());

        EmailData e = model.defaultSenderEmail(e2);
        EmailData expected = new EmailData();
        expected.setDefaultSenderEmail(e2);
        assertEquals(expected, e);
    }

    /**
     * Test the property 'senderEmailsList'
     */
    @Test
    public void senderEmailsListTest() {
        SenderEmail e1 = new SenderEmail()
                .id(1)
                .email("no-reply@fattureincloud.it");

        SenderEmail e2 = new SenderEmail()
                .id(2)
                .email("info@fattureincloud.it");

        assertEquals(new ArrayList<>(), model.getSenderEmailsList());
        model.setSenderEmailsList(Arrays.asList(e1, e2));
        assertEquals(Arrays.asList(e1, e2), model.getSenderEmailsList());

        EmailData e = model.senderEmailsList(new ArrayList<>());
        EmailData expected = new EmailData();
        expected.setSenderEmailsList(new ArrayList<>());
        assertEquals(expected, e);
        e.addSenderEmailsListItem(e2);
        assertEquals(Arrays.asList(e2), model.getSenderEmailsList());
    }

    /**
     * Test the property 'ccEmail'
     */
    @Test
    public void ccEmailTest() {
        assertNull(model.getCcEmail());
        model.setCcEmail("no-reply@fattureincloud.it");
        assertEquals("no-reply@fattureincloud.it", model.getCcEmail());

        EmailData e = model.ccEmail("info@fattureincloud.it");
        EmailData expected = new EmailData();
        expected.setCcEmail("info@fattureincloud.it");
        assertEquals(expected, e);
    }

    /**
     * Test the property 'subject'
     */
    @Test
    public void subjectTest() {
        assertNull(model.getSubject());
        model.setSubject("Nostra pro forma nr. 1");
        assertEquals("Nostra pro forma nr. 1", model.getSubject());

        EmailData e = model.subject("Nostra pro forma nr. 2");
        EmailData expected = new EmailData();
        expected.setSubject("Nostra pro forma nr. 2");
        assertEquals(expected, e);
    }

    /**
     * Test the property 'body'
     */
    @Test
    public void bodyTest() {
        assertNull(model.getBody());
        model.setBody("Gentile Mario Rossi,<br>per vedere la nostra pro forma di  o per scaricarne una copia in versione PDF prema sul bottone sottoastante.<br><br>{{allegati}}<br><br>Cordiali saluti,<br><b>Mario Rossi</b>");
        assertEquals("Gentile Mario Rossi,<br>per vedere la nostra pro forma di  o per scaricarne una copia in versione PDF prema sul bottone sottoastante.<br><br>{{allegati}}<br><br>Cordiali saluti,<br><b>Mario Rossi</b>", model.getBody());

        EmailData e = model.body("Bla bla");
        EmailData expected = new EmailData();
        expected.setBody("Bla bla");
        assertEquals(expected, e);
    }

    /**
     * Test the property 'documentExists'
     */
    @Test
    public void documentExistsTest() {
        assertNull(model.getDocumentExists());
        model.setDocumentExists(true);
        assertEquals(true, model.getDocumentExists());

        EmailData e = model.documentExists(false);
        EmailData expected = new EmailData();
        expected.setDocumentExists(false);
        assertEquals(expected, e);
    }

    /**
     * Test the property 'deliveryNoteExists'
     */
    @Test
    public void deliveryNoteExistsTest() {
        assertNull(model.getDeliveryNoteExists());
        model.setDeliveryNoteExists(true);
        assertEquals(true, model.getDeliveryNoteExists());

        EmailData e = model.deliveryNoteExists(false);
        EmailData expected = new EmailData();
        expected.setDeliveryNoteExists(false);
        assertEquals(expected, e);
    }

    /**
     * Test the property 'attachmentExists'
     */
    @Test
    public void attachmentExistsTest() {
        assertNull(model.getAttachmentExists());
        model.setAttachmentExists(true);
        assertEquals(true, model.getAttachmentExists());

        EmailData e = model.attachmentExists(false);
        EmailData expected = new EmailData();
        expected.setAttachmentExists(false);
        assertEquals(expected, e);
    }

    /**
     * Test the property 'accompanyingInvoiceExists'
     */
    @Test
    public void accompanyingInvoiceExistsTest() {
        assertNull(model.getAccompanyingInvoiceExists());
        model.setAccompanyingInvoiceExists(true);
        assertEquals(true, model.getAccompanyingInvoiceExists());

        EmailData e = model.accompanyingInvoiceExists(false);
        EmailData expected = new EmailData();
        expected.setAccompanyingInvoiceExists(false);
        assertEquals(expected, e);
    }

    /**
     * Test the property 'defaultAttachPdf'
     */
    @Test
    public void defaultAttachPdfTest() {
        assertNull(model.getDefaultAttachPdf());
        model.setDefaultAttachPdf(true);
        assertEquals(true, model.getDefaultAttachPdf());

        EmailData e = model.defaultAttachPdf(false);
        EmailData expected = new EmailData();
        expected.setDefaultAttachPdf(false);
        assertEquals(expected, e);
    }

}
