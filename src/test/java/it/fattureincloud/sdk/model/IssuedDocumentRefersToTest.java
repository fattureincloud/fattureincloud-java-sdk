/*
 * Fatture in Cloud API v2 - API Reference
 * Connect your software with Fatture in Cloud, the invoicing platform chosen by more than 400.000 businesses in Italy.   The Fatture in Cloud API is based on REST, and makes possible to interact with the user related data prior authorization via OAuth2 protocol.
 *
 * The version of the OpenAPI document: 2.0.7
 * Contact: info@fattureincloud.it
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package it.fattureincloud.sdk.model;

import com.google.gson.Gson;
import it.fattureincloud.sdk.JSON;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.time.LocalDate;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertFalse;


/**
 * Model tests for IssuedDocumentRefersTo
 */
public class IssuedDocumentRefersToTest {
    private IssuedDocumentRefersTo model;

    @BeforeEach
    public void init() {
        model = new IssuedDocumentRefersTo()
                .id(1)
                .date(LocalDate.of(2021, 12, 25))
                .number(1)
                .numeration("num")
                .description("desc");
    }

    /**
     * Model tests for IssuedDocumentRefersTo
     */
    @Test
    public void testIssuedDocumentRefersTo() {
        JSON jsonManager = new JSON();
        Gson gson = jsonManager.getGson();
        String json = gson.toJson(model);
        String str = "{\"id\":1,\"date\":\"2021-12-25\",\"number\":1,\"numeration\":\"num\",\"description\":\"desc\"}";
        assertEquals(str, json);
        IssuedDocumentRefersTo generated = gson.fromJson(str, IssuedDocumentRefersTo.class);
        assertEquals(model, generated);

        Object o = model;
        assertEquals(model, o);
        assertFalse(model.equals(null));
        assertFalse(model.equals(Integer.getInteger("5")));
    }

    /**
     * Test the property 'id'
     */
    @Test
    public void idTest() {
        assertEquals(1, model.getId());
        model.setId(2);
        assertEquals(2, model.getId());

        IssuedDocumentRefersTo i = model.id(1);
        IssuedDocumentRefersTo expected = new IssuedDocumentRefersTo()
                .id(1)
                .date(LocalDate.of(2021, 12, 25))
                .number(1)
                .numeration("num")
                .description("desc");
        assertEquals(expected, i);
    }

    /**
     * Test the property 'date'
     */
    @Test
    public void dateTest() {
        assertEquals(LocalDate.of(2021, 12, 25), model.getDate());
        model.setDate(LocalDate.of(2021, 12, 26));
        assertEquals(LocalDate.of(2021, 12, 26), model.getDate());

        IssuedDocumentRefersTo i = model.date(LocalDate.of(2021, 12, 25));
        IssuedDocumentRefersTo expected = new IssuedDocumentRefersTo()
                .id(1)
                .date(LocalDate.of(2021, 12, 25))
                .number(1)
                .numeration("num")
                .description("desc");
        assertEquals(expected, i);
    }

    /**
     * Test the property 'number'
     */
    @Test
    public void numberTest() {
        assertEquals(1, model.getNumber());
        model.setNumber(2);
        assertEquals(2, model.getNumber());

        IssuedDocumentRefersTo i = model.number(1);
        IssuedDocumentRefersTo expected = new IssuedDocumentRefersTo()
                .id(1)
                .date(LocalDate.of(2021, 12, 25))
                .number(1)
                .numeration("num")
                .description("desc");
        assertEquals(expected, i);
    }

    /**
     * Test the property 'numeration'
     */
    @Test
    public void numerationTest() {
        assertEquals("num", model.getNumeration());
        model.setNumeration("2");
        assertEquals("2", model.getNumeration());

        IssuedDocumentRefersTo i = model.numeration("num");
        IssuedDocumentRefersTo expected = new IssuedDocumentRefersTo()
                .id(1)
                .date(LocalDate.of(2021, 12, 25))
                .number(1)
                .numeration("num")
                .description("desc");
        assertEquals(expected, i);
    }

    /**
     * Test the property 'description'
     */
    @Test
    public void descriptionTest() {
        assertEquals("desc", model.getDescription());
        model.setDescription("2");
        assertEquals("2", model.getDescription());

        IssuedDocumentRefersTo i = model.description("desc");
        IssuedDocumentRefersTo expected = new IssuedDocumentRefersTo()
                .id(1)
                .date(LocalDate.of(2021, 12, 25))
                .number(1)
                .numeration("num")
                .description("desc");
        assertEquals(expected, i);
    }

}
