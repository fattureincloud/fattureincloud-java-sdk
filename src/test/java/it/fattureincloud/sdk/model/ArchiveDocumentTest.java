/*
 * Fatture in Cloud API v2 - API Reference
 * Connect your software with Fatture in Cloud, the invoicing platform chosen by more than 400.000 businesses in Italy.   The Fatture in Cloud API is based on REST, and makes possible to interact with the user related data prior authorization via OAuth2 protocol.
 *
 * The version of the OpenAPI document: 2.0.11
 * Contact: info@fattureincloud.it
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package it.fattureincloud.sdk.model;

import com.google.gson.Gson;
import it.fattureincloud.sdk.JSON;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.time.LocalDate;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertFalse;


/**
 * Model tests for ArchiveDocument
 */
public class ArchiveDocumentTest {
    private ArchiveDocument model;

    @BeforeEach
    public void init() {
        model = new ArchiveDocument()
                .id(12345)
                .date(LocalDate.parse("2021-08-20"))
                .category("Altri documenti")
                .description("spesa 2")
                .attachmentToken("jwfbaiuwbfoiewfoa8weohafw7gefa9we");
    }

    /**
     * Model tests for ArchiveDocument
     */
    @Test
    public void testArchiveDocument() {
        JSON jsonManager = new JSON();
        Gson gson = jsonManager.getGson();
        String json = gson.toJson(model);
        String str = "{\"id\":12345,\"date\":\"2021-08-20\",\"description\":\"spesa 2\",\"category\":\"Altri documenti\",\"attachment_token\":\"jwfbaiuwbfoiewfoa8weohafw7gefa9we\"}";
        assertEquals(str, json);
        ArchiveDocument generated = gson.fromJson(str, ArchiveDocument.class);
        assertEquals(model, generated);

        Object o = model;
        assertEquals(model, o);
        assertFalse(model.equals(null));
        assertFalse(model.equals(Integer.getInteger("5")));
    }

    /**
     * Test the property 'id'
     */
    @Test
    public void idTest() {
        assertEquals(12345, model.getId());
        model.setId(33333);
        assertEquals(33333, model.getId());

        ArchiveDocument a = model.id(69);
        ArchiveDocument expected = new ArchiveDocument()
                .id(69)
                .date(LocalDate.parse("2021-08-20"))
                .category("Altri documenti")
                .description("spesa 2")
                .attachmentToken("jwfbaiuwbfoiewfoa8weohafw7gefa9we");
        assertEquals(expected, a);
    }

    /**
     * Test the property 'date'
     */
    @Test
    public void dateTest() {
        assertEquals(LocalDate.parse("2021-08-20"), model.getDate());
        model.setDate(LocalDate.parse("2021-12-21"));
        assertEquals(LocalDate.parse("2021-12-21"), model.getDate());

        ArchiveDocument a = model.date(LocalDate.parse("2021-12-17"));
        ArchiveDocument expected = new ArchiveDocument()
                .id(12345)
                .date(LocalDate.parse("2021-12-17"))
                .category("Altri documenti")
                .description("spesa 2")
                .attachmentToken("jwfbaiuwbfoiewfoa8weohafw7gefa9we");
        assertEquals(expected, a);
    }

    /**
     * Test the property 'description'
     */
    @Test
    public void descriptionTest() {
        assertEquals("spesa 2", model.getDescription());
        model.setDescription("pensavo fosse un gioco");
        assertEquals("pensavo fosse un gioco", model.getDescription());

        ArchiveDocument a = model.description("è stato mio figlio minorenne");
        ArchiveDocument expected = new ArchiveDocument()
                .id(12345)
                .date(LocalDate.parse("2021-08-20"))
                .category("Altri documenti")
                .description("è stato mio figlio minorenne")
                .attachmentToken("jwfbaiuwbfoiewfoa8weohafw7gefa9we");
        assertEquals(expected, a);
    }

    /**
     * Test the property 'attachmentUrl'
     */
    @Test
    public void attachmentUrlTest() {
        JSON jsonManager = new JSON();
        Gson gson = jsonManager.getGson();
        String str = "{\"id\":12345,\"date\":\"2021-08-20\",\"description\":\"spesa 2\",\"attachment_url\":\"spesa2.pdf\",\"category\":\"Altri documenti\",\"attachment_token\":\"jwfbaiuwbfoiewfoa8weohafw7gefa9we\"}";
        ArchiveDocument generated = gson.fromJson(str, ArchiveDocument.class);
        assertEquals("spesa2.pdf", generated.getAttachmentUrl());
        assertEquals("{\"id\":12345,\"date\":\"2021-08-20\",\"description\":\"spesa 2\",\"attachment_url\":\"spesa2.pdf\",\"category\":\"Altri documenti\",\"attachment_token\":\"jwfbaiuwbfoiewfoa8weohafw7gefa9we\"}", gson.toJson(generated));
    }

    /**
     * Test the property 'category'
     */
    @Test
    public void categoryTest() {
        assertEquals("Altri documenti", model.getCategory());
        model.setCategory("Top secret");
        assertEquals("Top secret", model.getCategory());

        ArchiveDocument a = model.category("Lista della spesa");
        ArchiveDocument expected = new ArchiveDocument()
                .id(12345)
                .date(LocalDate.parse("2021-08-20"))
                .category("Lista della spesa")
                .description("spesa 2")
                .attachmentToken("jwfbaiuwbfoiewfoa8weohafw7gefa9we");
        assertEquals(expected, a);
    }

    /**
     * Test the property 'attachmentToken'
     */
    @Test
    public void attachmentTokenTest() {
        assertEquals("jwfbaiuwbfoiewfoa8weohafw7gefa9we", model.getAttachmentToken());
        model.setAttachmentToken("25630541cfeac29c829c8f9e057812ba");
        assertEquals("25630541cfeac29c829c8f9e057812ba", model.getAttachmentToken());

        ArchiveDocument a = model.attachmentToken("25a2b204540559e615c90bb5438680f3");
        ArchiveDocument expected = new ArchiveDocument()
                .id(12345)
                .date(LocalDate.parse("2021-08-20"))
                .category("Altri documenti")
                .description("spesa 2")
                .attachmentToken("25a2b204540559e615c90bb5438680f3");
        assertEquals(expected, a);
    }

}
