/*
 * Fatture in Cloud API v2 - API Reference
 * Connect your software with Fatture in Cloud, the invoicing platform chosen by more than 400.000 businesses in Italy.   The Fatture in Cloud API is based on REST, and makes possible to interact with the user related data prior authorization via OAuth2 protocol.
 *
 * The version of the OpenAPI document: 2.0.11
 * Contact: info@fattureincloud.it
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package it.fattureincloud.sdk.model;

import static org.junit.jupiter.api.Assertions.*;

import com.google.gson.Gson;
import it.fattureincloud.sdk.JSON;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

/** Model tests for Permissions */
public class PermissionsTest {
  private Permissions model;

  @BeforeEach
  public void init() {
    model = new Permissions();
  }

  /** Model tests for Permissions */
  @Test
  public void testPermissions() {
    Permissions p =
        new Permissions()
            .ficSituation(PermissionLevel.WRITE)
            .ficClients(PermissionLevel.WRITE)
            .ficSuppliers(PermissionLevel.WRITE)
            .ficProducts(PermissionLevel.WRITE)
            .ficIssuedDocuments(PermissionLevel.WRITE)
            .ficReceivedDocuments(PermissionLevel.WRITE)
            .ficReceipts(PermissionLevel.WRITE)
            .ficCalendar(PermissionLevel.WRITE)
            .ficArchive(PermissionLevel.WRITE)
            .ficTaxes(PermissionLevel.WRITE)
            .ficStock(PermissionLevel.WRITE)
            .ficCashbook(PermissionLevel.WRITE)
            .ficSettings(PermissionLevel.WRITE)
            .ficEmails(PermissionLevel.WRITE)
            .dicEmployees(PermissionLevel.WRITE)
            .dicTimesheet(PermissionLevel.WRITE)
            .dicSettings(PermissionLevel.WRITE)
            .ficExport(PermissionLevel.WRITE)
            .ficImportBankstatements(PermissionLevel.WRITE)
            .ficImportIssuedDocuments(PermissionLevel.WRITE)
            .ficImportProducts(PermissionLevel.WRITE)
            .ficRecurring(PermissionLevel.WRITE)
            .ficRiba(PermissionLevel.WRITE)
            .ficImportClientsSuppliers(PermissionLevel.WRITE)
            .ficIssuedDocumentsDetailed(
                new PermissionsFicIssuedDocumentsDetailed()
                    .quotes(PermissionLevel.WRITE)
                    .proformas(PermissionLevel.WRITE)
                    .invoices(PermissionLevel.WRITE)
                    .receipts(PermissionLevel.WRITE)
                    .deliveryNotes(PermissionLevel.WRITE)
                    .creditNotes(PermissionLevel.WRITE)
                    .orders(PermissionLevel.WRITE)
                    .workReports(PermissionLevel.WRITE)
                    .supplierOrders(PermissionLevel.WRITE)
                    .selfInvoices(PermissionLevel.WRITE));

    JSON jsonManager = new JSON();
    Gson gson = jsonManager.getGson();
    String json = gson.toJson(p);
    String str =
        "{\"fic_situation\":\"write\",\"fic_clients\":\"write\",\"fic_suppliers\":\"write\",\"fic_products\":\"write\",\"fic_issued_documents\":\"write\",\"fic_received_documents\":\"write\",\"fic_receipts\":\"write\",\"fic_calendar\":\"write\",\"fic_archive\":\"write\",\"fic_taxes\":\"write\",\"fic_stock\":\"write\",\"fic_cashbook\":\"write\",\"fic_settings\":\"write\",\"fic_emails\":\"write\",\"fic_export\":\"write\",\"fic_import_bankstatements\":\"write\",\"fic_import_clients_suppliers\":\"write\",\"fic_import_issued_documents\":\"write\",\"fic_import_products\":\"write\",\"fic_recurring\":\"write\",\"fic_riba\":\"write\",\"dic_employees\":\"write\",\"dic_settings\":\"write\",\"dic_timesheet\":\"write\",\"fic_issued_documents_detailed\":{\"quotes\":\"write\",\"proformas\":\"write\",\"invoices\":\"write\",\"receipts\":\"write\",\"delivery_notes\":\"write\",\"credit_notes\":\"write\",\"orders\":\"write\",\"work_reports\":\"write\",\"supplier_orders\":\"write\",\"self_invoices\":\"write\"}}";
    assertEquals(str, json);
    Permissions generated = gson.fromJson(str, Permissions.class);
    assertEquals(p, generated);

    Object o = model;
    assertEquals(model, o);
    assertFalse(model.equals(null));
    assertFalse(model.equals(Integer.getInteger("5")));
  }

  /** Test the property 'ficSituation' */
  @Test
  public void ficSituationTest() {
    assertNull(model.getFicSituation());
    model.setFicSituation(PermissionLevel.READ);
    assertEquals(PermissionLevel.READ, model.getFicSituation());

    Permissions p = model.ficSituation(PermissionLevel.WRITE);
    Permissions expected = new Permissions();
    expected.setFicSituation(PermissionLevel.WRITE);
    assertEquals(expected, p);
  }

  /** Test the property 'ficClients' */
  @Test
  public void ficClientsTest() {
    assertNull(model.getFicClients());
    model.setFicClients(PermissionLevel.READ);
    assertEquals(PermissionLevel.READ, model.getFicClients());

    Permissions p = model.ficClients(PermissionLevel.WRITE);
    Permissions expected = new Permissions();
    expected.setFicClients(PermissionLevel.WRITE);
    assertEquals(expected, p);
  }

  /** Test the property 'ficSuppliers' */
  @Test
  public void ficSuppliersTest() {
    assertNull(model.getFicSuppliers());
    model.setFicSuppliers(PermissionLevel.READ);
    assertEquals(PermissionLevel.READ, model.getFicSuppliers());

    Permissions p = model.ficSuppliers(PermissionLevel.WRITE);
    Permissions expected = new Permissions();
    expected.setFicSuppliers(PermissionLevel.WRITE);
    assertEquals(expected, p);
  }

  /** Test the property 'ficProducts' */
  @Test
  public void ficProductsTest() {
    assertNull(model.getFicProducts());
    model.setFicProducts(PermissionLevel.READ);
    assertEquals(PermissionLevel.READ, model.getFicProducts());

    Permissions p = model.ficProducts(PermissionLevel.WRITE);
    Permissions expected = new Permissions();
    expected.setFicProducts(PermissionLevel.WRITE);
    assertEquals(expected, p);
  }

  /** Test the property 'ficIssuedDocuments' */
  @Test
  public void ficIssuedDocumentsTest() {
    assertNull(model.getFicIssuedDocuments());
    model.setFicIssuedDocuments(PermissionLevel.READ);
    assertEquals(PermissionLevel.READ, model.getFicIssuedDocuments());

    Permissions p = model.ficIssuedDocuments(PermissionLevel.WRITE);
    Permissions expected = new Permissions();
    expected.setFicIssuedDocuments(PermissionLevel.WRITE);
    assertEquals(expected, p);
  }

  /** Test the property 'ficReceivedDocuments' */
  @Test
  public void ficReceivedDocumentsTest() {
    assertNull(model.getFicReceivedDocuments());
    model.setFicReceivedDocuments(PermissionLevel.READ);
    assertEquals(PermissionLevel.READ, model.getFicReceivedDocuments());

    Permissions p = model.ficReceivedDocuments(PermissionLevel.WRITE);
    Permissions expected = new Permissions();
    expected.setFicReceivedDocuments(PermissionLevel.WRITE);
    assertEquals(expected, p);
  }

  /** Test the property 'ficReceipts' */
  @Test
  public void ficReceiptsTest() {
    assertNull(model.getFicReceipts());
    model.setFicReceipts(PermissionLevel.READ);
    assertEquals(PermissionLevel.READ, model.getFicReceipts());

    Permissions p = model.ficReceipts(PermissionLevel.WRITE);
    Permissions expected = new Permissions();
    expected.setFicReceipts(PermissionLevel.WRITE);
    assertEquals(expected, p);
  }

  /** Test the property 'ficCalendar' */
  @Test
  public void ficCalendarTest() {
    assertNull(model.getFicCalendar());
    model.setFicCalendar(PermissionLevel.READ);
    assertEquals(PermissionLevel.READ, model.getFicCalendar());

    Permissions p = model.ficCalendar(PermissionLevel.WRITE);
    Permissions expected = new Permissions();
    expected.setFicCalendar(PermissionLevel.WRITE);
    assertEquals(expected, p);
  }

  /** Test the property 'ficArchive' */
  @Test
  public void ficArchiveTest() {
    assertNull(model.getFicArchive());
    model.setFicArchive(PermissionLevel.READ);
    assertEquals(PermissionLevel.READ, model.getFicArchive());

    Permissions p = model.ficArchive(PermissionLevel.WRITE);
    Permissions expected = new Permissions();
    expected.setFicArchive(PermissionLevel.WRITE);
    assertEquals(expected, p);
  }

  /** Test the property 'ficTaxes' */
  @Test
  public void ficTaxesTest() {
    assertNull(model.getFicTaxes());
    model.setFicTaxes(PermissionLevel.READ);
    assertEquals(PermissionLevel.READ, model.getFicTaxes());

    Permissions p = model.ficTaxes(PermissionLevel.WRITE);
    Permissions expected = new Permissions();
    expected.setFicTaxes(PermissionLevel.WRITE);
    assertEquals(expected, p);
  }

  /** Test the property 'ficStock' */
  @Test
  public void ficStockTest() {
    assertNull(model.getFicStock());
    model.setFicStock(PermissionLevel.READ);
    assertEquals(PermissionLevel.READ, model.getFicStock());

    Permissions p = model.ficStock(PermissionLevel.WRITE);
    Permissions expected = new Permissions();
    expected.setFicStock(PermissionLevel.WRITE);
    assertEquals(expected, p);
  }

  /** Test the property 'ficCashbook' */
  @Test
  public void ficCashbookTest() {
    assertNull(model.getFicCashbook());
    model.setFicCashbook(PermissionLevel.READ);
    assertEquals(PermissionLevel.READ, model.getFicCashbook());

    Permissions p = model.ficCashbook(PermissionLevel.WRITE);
    Permissions expected = new Permissions();
    expected.setFicCashbook(PermissionLevel.WRITE);
    assertEquals(expected, p);
  }

  /** Test the property 'ficSettings' */
  @Test
  public void ficSettingsTest() {
    assertNull(model.getFicSettings());
    model.setFicSettings(PermissionLevel.READ);
    assertEquals(PermissionLevel.READ, model.getFicSettings());

    Permissions p = model.ficSettings(PermissionLevel.WRITE);
    Permissions expected = new Permissions();
    expected.setFicSettings(PermissionLevel.WRITE);
    assertEquals(expected, p);
  }

  /** Test the property 'ficEmails' */
  @Test
  public void ficEmailsTest() {
    assertNull(model.getFicEmails());
    model.setFicEmails(PermissionLevel.READ);
    assertEquals(PermissionLevel.READ, model.getFicEmails());

    Permissions p = model.ficEmails(PermissionLevel.WRITE);
    Permissions expected = new Permissions();
    expected.setFicEmails(PermissionLevel.WRITE);
    assertEquals(expected, p);
  }

  /** Test the property 'ficExport' */
  @Test
  public void ficExportTest() {
    assertNull(model.getFicExport());
    model.setFicExport(PermissionLevel.READ);
    assertEquals(PermissionLevel.READ, model.getFicExport());

    Permissions p = model.ficExport(PermissionLevel.WRITE);
    Permissions expected = new Permissions();
    expected.setFicExport(PermissionLevel.WRITE);
    assertEquals(expected, p);
  }

  /** Test the property 'ficImportBankstatements' */
  @Test
  public void ficImportBankstatementsTest() {
    assertNull(model.getFicImportBankstatements());
    model.setFicImportBankstatements(PermissionLevel.READ);
    assertEquals(PermissionLevel.READ, model.getFicImportBankstatements());

    Permissions p = model.ficImportBankstatements(PermissionLevel.WRITE);
    Permissions expected = new Permissions();
    expected.setFicImportBankstatements(PermissionLevel.WRITE);
    assertEquals(expected, p);
  }

  /** Test the property 'ficImportClientsSuppliers' */
  @Test
  public void ficImportClientsSuppliersTest() {
    assertNull(model.getFicImportClientsSuppliers());
    model.setFicImportClientsSuppliers(PermissionLevel.READ);
    assertEquals(PermissionLevel.READ, model.getFicImportClientsSuppliers());

    Permissions p = model.ficImportClientsSuppliers(PermissionLevel.WRITE);
    Permissions expected = new Permissions();
    expected.setFicImportClientsSuppliers(PermissionLevel.WRITE);
    assertEquals(expected, p);
  }

  /** Test the property 'ficImportIssuedDocuments' */
  @Test
  public void ficImportIssuedDocumentsTest() {
    assertNull(model.getFicImportIssuedDocuments());
    model.setFicImportIssuedDocuments(PermissionLevel.READ);
    assertEquals(PermissionLevel.READ, model.getFicImportIssuedDocuments());

    Permissions p = model.ficImportIssuedDocuments(PermissionLevel.WRITE);
    Permissions expected = new Permissions();
    expected.setFicImportIssuedDocuments(PermissionLevel.WRITE);
    assertEquals(expected, p);
  }

  /** Test the property 'ficImportProducts' */
  @Test
  public void ficImportProductsTest() {
    assertNull(model.getFicImportProducts());
    model.setFicImportProducts(PermissionLevel.READ);
    assertEquals(PermissionLevel.READ, model.getFicImportProducts());

    Permissions p = model.ficImportProducts(PermissionLevel.WRITE);
    Permissions expected = new Permissions();
    expected.setFicImportProducts(PermissionLevel.WRITE);
    assertEquals(expected, p);
  }

  /** Test the property 'ficRecurring' */
  @Test
  public void ficRecurringTest() {
    assertNull(model.getFicRecurring());
    model.setFicRecurring(PermissionLevel.READ);
    assertEquals(PermissionLevel.READ, model.getFicRecurring());

    Permissions p = model.ficRecurring(PermissionLevel.WRITE);
    Permissions expected = new Permissions();
    expected.setFicRecurring(PermissionLevel.WRITE);
    assertEquals(expected, p);
  }

  /** Test the property 'ficRiba' */
  @Test
  public void ficRibaTest() {
    assertNull(model.getFicRiba());
    model.setFicRiba(PermissionLevel.READ);
    assertEquals(PermissionLevel.READ, model.getFicRiba());

    Permissions p = model.ficRiba(PermissionLevel.WRITE);
    Permissions expected = new Permissions();
    expected.setFicRiba(PermissionLevel.WRITE);
    assertEquals(expected, p);
  }

  /** Test the property 'dicEmployees' */
  @Test
  public void dicEmployeesTest() {
    assertNull(model.getDicEmployees());
    model.setDicEmployees(PermissionLevel.READ);
    assertEquals(PermissionLevel.READ, model.getDicEmployees());

    Permissions p = model.dicEmployees(PermissionLevel.WRITE);
    Permissions expected = new Permissions();
    expected.setDicEmployees(PermissionLevel.WRITE);
    assertEquals(expected, p);
  }

  /** Test the property 'dicSettings' */
  @Test
  public void dicSettingsTest() {
    assertNull(model.getDicSettings());
    model.setDicSettings(PermissionLevel.READ);
    assertEquals(PermissionLevel.READ, model.getDicSettings());

    Permissions p = model.dicSettings(PermissionLevel.WRITE);
    Permissions expected = new Permissions();
    expected.setDicSettings(PermissionLevel.WRITE);
    assertEquals(expected, p);
  }

  /** Test the property 'dicTimesheet' */
  @Test
  public void dicTimesheetTest() {
    assertNull(model.getDicTimesheet());
    model.setDicTimesheet(PermissionLevel.READ);
    assertEquals(PermissionLevel.READ, model.getDicTimesheet());

    Permissions p = model.dicTimesheet(PermissionLevel.WRITE);
    Permissions expected = new Permissions();
    expected.setDicTimesheet(PermissionLevel.WRITE);
    assertEquals(expected, p);
  }

  /** Test the property 'ficIssuedDocumentsDetailed' */
  @Test
  public void ficIssuedDocumentsDetailedTest() {
    PermissionsFicIssuedDocumentsDetailed p1 =
        new PermissionsFicIssuedDocumentsDetailed()
            .quotes(PermissionLevel.WRITE)
            .proformas(PermissionLevel.WRITE)
            .invoices(PermissionLevel.WRITE)
            .receipts(PermissionLevel.WRITE)
            .deliveryNotes(PermissionLevel.WRITE)
            .creditNotes(PermissionLevel.WRITE)
            .orders(PermissionLevel.WRITE)
            .workReports(PermissionLevel.WRITE)
            .supplierOrders(PermissionLevel.WRITE)
            .selfInvoices(PermissionLevel.WRITE);

    PermissionsFicIssuedDocumentsDetailed p2 =
        new PermissionsFicIssuedDocumentsDetailed()
            .quotes(PermissionLevel.READ)
            .proformas(PermissionLevel.READ)
            .invoices(PermissionLevel.READ)
            .receipts(PermissionLevel.READ)
            .deliveryNotes(PermissionLevel.READ)
            .creditNotes(PermissionLevel.READ)
            .orders(PermissionLevel.READ)
            .workReports(PermissionLevel.READ)
            .supplierOrders(PermissionLevel.READ)
            .selfInvoices(PermissionLevel.READ);

    assertNull(model.getFicIssuedDocumentsDetailed());
    model.setFicIssuedDocumentsDetailed(p1);
    assertEquals(p1, model.getFicIssuedDocumentsDetailed());

    Permissions p = model.ficIssuedDocumentsDetailed(p2);
    Permissions expected = new Permissions();
    expected.setFicIssuedDocumentsDetailed(p2);
    assertEquals(expected, p);
  }
}
