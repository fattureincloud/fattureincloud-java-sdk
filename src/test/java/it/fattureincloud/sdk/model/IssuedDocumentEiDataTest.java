/*
 * Fatture in Cloud API v2 - API Reference
 * Connect your software with Fatture in Cloud, the invoicing platform chosen by more than 400.000 businesses in Italy.   The Fatture in Cloud API is based on REST, and makes possible to interact with the user related data prior authorization via OAuth2 protocol.
 *
 * The version of the OpenAPI document: 2.0.11
 * Contact: info@fattureincloud.it
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package it.fattureincloud.sdk.model;

import com.google.gson.Gson;
import it.fattureincloud.sdk.JSON;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.time.LocalDate;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertFalse;


/**
 * Model tests for IssuedDocumentEiData
 */
public class IssuedDocumentEiDataTest {
    private IssuedDocumentEiData model;

    @BeforeEach
    public void init() {
        model = new IssuedDocumentEiData()
                .vatKind(VatKind.D)
                .originalDocumentType(OriginalDocumentType.CONTRATTO)
                .odNumber("odnum")
                .odDate(LocalDate.of(2021, 12, 25))
                .cup("string")
                .cig("string")
                .paymentMethod("EC21")
                .bankName("nome bancala")
                .bankIban("ITP00001231248137y41")
                .bankBeneficiary("bank beneficiary")
                .invoiceNumber("123")
                .invoiceDate(LocalDate.of(2021, 12, 25));
    }


    /**
     * Model tests for IssuedDocumentEiData
     */
    @Test
    public void testIssuedDocumentEiData() {
        JSON jsonManager = new JSON();
        Gson gson = jsonManager.getGson();
        String json = gson.toJson(model);
        String str = "{\"vat_kind\":\"D\",\"original_document_type\":\"contratto\",\"od_number\":\"odnum\",\"od_date\":\"2021-12-25\",\"cig\":\"string\",\"cup\":\"string\",\"payment_method\":\"EC21\",\"bank_name\":\"nome bancala\",\"bank_iban\":\"ITP00001231248137y41\",\"bank_beneficiary\":\"bank beneficiary\",\"invoice_number\":\"123\",\"invoice_date\":\"2021-12-25\"}";
        assertEquals(str, json);
        IssuedDocumentEiData generated = gson.fromJson(str, IssuedDocumentEiData.class);
        assertEquals(model, generated);

        Object o = model;
        assertEquals(model, o);
        assertFalse(model.equals(null));
        assertFalse(model.equals(Integer.getInteger("5")));
    }

    /**
     * Test the property 'vatKind'
     */
    @Test
    public void vatKindTest() {
        assertEquals(VatKind.D, model.getVatKind());
        model.setVatKind(VatKind.I);
        assertEquals(VatKind.I, model.getVatKind());

        IssuedDocumentEiData i = model.vatKind(VatKind.S);
        IssuedDocumentEiData expected = new IssuedDocumentEiData()
                .vatKind(VatKind.S)
                .originalDocumentType(OriginalDocumentType.CONTRATTO)
                .odNumber("odnum")
                .odDate(LocalDate.of(2021, 12, 25))
                .cup("string")
                .cig("string")
                .paymentMethod("EC21")
                .bankName("nome bancala")
                .bankIban("ITP00001231248137y41")
                .bankBeneficiary("bank beneficiary")
                .invoiceNumber("123")
                .invoiceDate(LocalDate.of(2021, 12, 25));
        assertEquals(expected, i);
    }

    /**
     * Test the property 'originalDocumentType'
     */
    @Test
    public void originalDocumentTypeTest() {
        assertEquals(OriginalDocumentType.CONTRATTO, model.getOriginalDocumentType());
        model.setOriginalDocumentType(OriginalDocumentType.ORDINE);
        assertEquals(OriginalDocumentType.ORDINE, model.getOriginalDocumentType());

        IssuedDocumentEiData i = model.originalDocumentType(OriginalDocumentType.CONVENZIONE);
        IssuedDocumentEiData expected = new IssuedDocumentEiData()
                .vatKind(VatKind.D)
                .originalDocumentType(OriginalDocumentType.CONVENZIONE)
                .odNumber("odnum")
                .odDate(LocalDate.of(2021, 12, 25))
                .cup("string")
                .cig("string")
                .paymentMethod("EC21")
                .bankName("nome bancala")
                .bankIban("ITP00001231248137y41")
                .bankBeneficiary("bank beneficiary")
                .invoiceNumber("123")
                .invoiceDate(LocalDate.of(2021, 12, 25));
        assertEquals(expected, i);
    }

    /**
     * Test the property 'odNumber'
     */
    @Test
    public void odNumberTest() {
        assertEquals("odnum", model.getOdNumber());
        model.setOdNumber("odmod");
        assertEquals("odmod", model.getOdNumber());

        IssuedDocumentEiData i = model.odNumber("odmod2");
        IssuedDocumentEiData expected = new IssuedDocumentEiData()
                .vatKind(VatKind.D)
                .originalDocumentType(OriginalDocumentType.CONTRATTO)
                .odNumber("odmod2")
                .odDate(LocalDate.of(2021, 12, 25))
                .cup("string")
                .cig("string")
                .paymentMethod("EC21")
                .bankName("nome bancala")
                .bankIban("ITP00001231248137y41")
                .bankBeneficiary("bank beneficiary")
                .invoiceNumber("123")
                .invoiceDate(LocalDate.of(2021, 12, 25));
        assertEquals(expected, i);
    }

    /**
     * Test the property 'odDate'
     */
    @Test
    public void odDateTest() {
        assertEquals(LocalDate.of(2021, 12, 25), model.getOdDate());
        model.setOdDate(LocalDate.of(2021, 12, 26));
        assertEquals(LocalDate.of(2021, 12, 26), model.getOdDate());

        IssuedDocumentEiData i = model.odDate(LocalDate.of(2021, 12, 27));
        IssuedDocumentEiData expected = new IssuedDocumentEiData()
                .vatKind(VatKind.D)
                .originalDocumentType(OriginalDocumentType.CONTRATTO)
                .odNumber("odnum")
                .odDate(LocalDate.of(2021, 12, 27))
                .cup("string")
                .cig("string")
                .paymentMethod("EC21")
                .bankName("nome bancala")
                .bankIban("ITP00001231248137y41")
                .bankBeneficiary("bank beneficiary")
                .invoiceNumber("123")
                .invoiceDate(LocalDate.of(2021, 12, 25));
        assertEquals(expected, i);
    }

    /**
     * Test the property 'cig'
     */
    @Test
    public void cigTest() {
        assertEquals("string", model.getCig());
        model.setCig("cig");
        assertEquals("cig", model.getCig());

        IssuedDocumentEiData i = model.cig("ciogan");
        IssuedDocumentEiData expected = new IssuedDocumentEiData()
                .vatKind(VatKind.D)
                .originalDocumentType(OriginalDocumentType.CONTRATTO)
                .odNumber("odnum")
                .odDate(LocalDate.of(2021, 12, 25))
                .cup("string")
                .cig("ciogan")
                .paymentMethod("EC21")
                .bankName("nome bancala")
                .bankIban("ITP00001231248137y41")
                .bankBeneficiary("bank beneficiary")
                .invoiceNumber("123")
                .invoiceDate(LocalDate.of(2021, 12, 25));
        assertEquals(expected, i);
    }

    /**
     * Test the property 'cup'
     */
    @Test
    public void cupTest() {
        assertEquals("string", model.getCup());
        model.setCup("cup");
        assertEquals("cup", model.getCup());

        IssuedDocumentEiData i = model.cup("cup of tea");
        IssuedDocumentEiData expected = new IssuedDocumentEiData()
                .vatKind(VatKind.D)
                .originalDocumentType(OriginalDocumentType.CONTRATTO)
                .odNumber("odnum")
                .odDate(LocalDate.of(2021, 12, 25))
                .cup("cup of tea")
                .cig("string")
                .paymentMethod("EC21")
                .bankName("nome bancala")
                .bankIban("ITP00001231248137y41")
                .bankBeneficiary("bank beneficiary")
                .invoiceNumber("123")
                .invoiceDate(LocalDate.of(2021, 12, 25));
        assertEquals(expected, i);
    }

    /**
     * Test the property 'paymentMethod'
     */
    @Test
    public void paymentMethodTest() {
        assertEquals("EC21", model.getPaymentMethod());
        model.setPaymentMethod("EZ66");
        assertEquals("EZ66", model.getPaymentMethod());

        IssuedDocumentEiData i = model.paymentMethod("FF00");
        IssuedDocumentEiData expected = new IssuedDocumentEiData()
                .vatKind(VatKind.D)
                .originalDocumentType(OriginalDocumentType.CONTRATTO)
                .odNumber("odnum")
                .odDate(LocalDate.of(2021, 12, 25))
                .cup("string")
                .cig("string")
                .paymentMethod("FF00")
                .bankName("nome bancala")
                .bankIban("ITP00001231248137y41")
                .bankBeneficiary("bank beneficiary")
                .invoiceNumber("123")
                .invoiceDate(LocalDate.of(2021, 12, 25));
        assertEquals(expected, i);
    }

    /**
     * Test the property 'bankName'
     */
    @Test
    public void bankNameTest() {
        assertEquals("nome bancala", model.getBankName());
        model.setBankName("banc1 (aka bancone)");
        assertEquals("banc1 (aka bancone)", model.getBankName());

        IssuedDocumentEiData i = model.bankName("lollipoppi");
        IssuedDocumentEiData expected = new IssuedDocumentEiData()
                .vatKind(VatKind.D)
                .originalDocumentType(OriginalDocumentType.CONTRATTO)
                .odNumber("odnum")
                .odDate(LocalDate.of(2021, 12, 25))
                .cup("string")
                .cig("string")
                .paymentMethod("EC21")
                .bankName("lollipoppi")
                .bankIban("ITP00001231248137y41")
                .bankBeneficiary("bank beneficiary")
                .invoiceNumber("123")
                .invoiceDate(LocalDate.of(2021, 12, 25));
        assertEquals(expected, i);
    }

    /**
     * Test the property 'bankIban'
     */
    @Test
    public void bankIbanTest() {
        assertEquals("ITP00001231248137y41", model.getBankIban());
        model.setBankIban("IT00000837246238");
        assertEquals("IT00000837246238", model.getBankIban());

        IssuedDocumentEiData i = model.bankIban("IT000074526948562");
        IssuedDocumentEiData expected = new IssuedDocumentEiData()
                .vatKind(VatKind.D)
                .originalDocumentType(OriginalDocumentType.CONTRATTO)
                .odNumber("odnum")
                .odDate(LocalDate.of(2021, 12, 25))
                .cup("string")
                .cig("string")
                .paymentMethod("EC21")
                .bankName("nome bancala")
                .bankIban("IT000074526948562")
                .bankBeneficiary("bank beneficiary")
                .invoiceNumber("123")
                .invoiceDate(LocalDate.of(2021, 12, 25));
        assertEquals(expected, i);
    }

    /**
     * Test the property 'bankBeneficiary'
     */
    @Test
    public void bankBeneficiaryTest() {
        assertEquals("bank beneficiary", model.getBankBeneficiary());
        model.setBankBeneficiary("v2");
        assertEquals("v2", model.getBankBeneficiary());

        IssuedDocumentEiData i = model.bankBeneficiary("v2");
        IssuedDocumentEiData expected = new IssuedDocumentEiData()
                .vatKind(VatKind.D)
                .originalDocumentType(OriginalDocumentType.CONTRATTO)
                .odNumber("odnum")
                .odDate(LocalDate.of(2021, 12, 25))
                .cup("string")
                .cig("string")
                .paymentMethod("EC21")
                .bankName("nome bancala")
                .bankIban("ITP00001231248137y41")
                .bankBeneficiary("v2")
                .invoiceNumber("123")
                .invoiceDate(LocalDate.of(2021, 12, 25));
        assertEquals(expected, i);
    }

    /**
     * Test the property 'invoiceNumber'
     */
    @Test
    public void invoiceNumberTest() {
        assertEquals("123", model.getInvoiceNumber());
        model.setInvoiceNumber("321");
        assertEquals("321", model.getInvoiceNumber());

        IssuedDocumentEiData i = model.invoiceNumber("321");
        IssuedDocumentEiData expected = new IssuedDocumentEiData()
                .vatKind(VatKind.D)
                .originalDocumentType(OriginalDocumentType.CONTRATTO)
                .odNumber("odnum")
                .odDate(LocalDate.of(2021, 12, 25))
                .cup("string")
                .cig("string")
                .paymentMethod("EC21")
                .bankName("nome bancala")
                .bankIban("ITP00001231248137y41")
                .bankBeneficiary("bank beneficiary")
                .invoiceNumber("321")
                .invoiceDate(LocalDate.of(2021, 12, 25));
        assertEquals(expected, i);
    }

    /**
     * Test the property 'invoiceDate'
     */
    @Test
    public void invoiceDateTest() {
        assertEquals(LocalDate.of(2021, 12, 25), model.getInvoiceDate());
        model.setInvoiceDate(LocalDate.of(2021, 12, 26));
        assertEquals(LocalDate.of(2021, 12, 26), model.getInvoiceDate());

        IssuedDocumentEiData i = model.invoiceDate(LocalDate.of(2021, 12, 27));
        IssuedDocumentEiData expected = new IssuedDocumentEiData()
                .vatKind(VatKind.D)
                .originalDocumentType(OriginalDocumentType.CONTRATTO)
                .odNumber("odnum")
                .odDate(LocalDate.of(2021, 12, 25))
                .cup("string")
                .cig("string")
                .paymentMethod("EC21")
                .bankName("nome bancala")
                .bankIban("ITP00001231248137y41")
                .bankBeneficiary("bank beneficiary")
                .invoiceNumber("123")
                .invoiceDate(LocalDate.of(2021, 12, 27));
        assertEquals(expected, i);
    }

}
