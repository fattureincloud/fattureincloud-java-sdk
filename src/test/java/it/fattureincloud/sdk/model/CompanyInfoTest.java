/*
 * Fatture in Cloud API v2 - API Reference
 * Connect your software with Fatture in Cloud, the invoicing platform chosen by more than 400.000 businesses in Italy.   The Fatture in Cloud API is based on REST, and makes possible to interact with the user related data prior authorization via OAuth2 protocol.
 *
 * The version of the OpenAPI document: 2.0.7
 * Contact: info@fattureincloud.it
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package it.fattureincloud.sdk.model;

import com.google.gson.Gson;
import it.fattureincloud.sdk.JSON;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;


/**
 * Model tests for CompanyInfo
 */
public class CompanyInfoTest {
    private CompanyInfo model;

    @BeforeEach
    public void init() {
        model = new CompanyInfo();
    }

    /**
     * Model tests for CompanyInfo
     */
    @Test
    public void testCompanyInfo() {
        CompanyInfo c = new CompanyInfo()
                .id(12346)
                .name("Studio Commercialista")
                .email("mario.rossi@example.com")
                .type(CompanyType.ACCOUNTANT)
                .isAccountant(true)
                .accountantId(12345)
                .accessInfo(new CompanyInfoAccessInfo()
                        .role(UserCompanyRole.MASTER)
                        .throughAccountant(false)
                )
                .planInfo(new CompanyInfoPlanInfo()
                        .limits(new CompanyInfoPlanInfoLimits()
                                .clients(5000)
                                .suppliers(5000)
                                .products(5000)
                                .documents(3000)
                        )
                        .functions(new CompanyInfoPlanInfoFunctions()
                                .documentAttachments(true)
                                .archive(true)
                                .paymentNotifications(true)
                                .paypal(true)
                                .receipts(true)
                                .eInvoice(true)
                                .genius(true)
                                .stock(true)
                                .smtp(true)
                                .mailTracking(true)
                                .subaccounts(true)
                                .tesseraSanitaria(true)
                                .recurring(true)
                                .sofort(false)
                                .cerved(true)
                                .tsDigital(true)
                                .tsPay(true)
                                .tsInvoiceTrading(true)
                        )
                        .functionsStatus(new CompanyInfoPlanInfoFunctionsStatus()
                                .tsDigital(new FunctionStatus()
                                        .active(true)
                                )
                                .tsPay(new FunctionStatus()
                                        .active(false)
                                )
                        )
                );

        JSON jsonManager = new JSON();
        Gson gson = jsonManager.getGson();
        String json = gson.toJson(c);
        String str = "{\"id\":12346,\"name\":\"Studio Commercialista\",\"email\":\"mario.rossi@example.com\",\"type\":\"accountant\",\"access_info\":{\"role\":\"master\",\"through_accountant\":false},\"plan_info\":{\"limits\":{\"clients\":5000,\"suppliers\":5000,\"products\":5000,\"documents\":3000},\"functions\":{\"archive\":true,\"cerved\":true,\"document_attachments\":true,\"e_invoice\":true,\"genius\":true,\"mail_tracking\":true,\"payment_notifications\":true,\"paypal\":true,\"receipts\":true,\"recurring\":true,\"smtp\":true,\"sofort\":false,\"stock\":true,\"subaccounts\":true,\"tessera_sanitaria\":true,\"ts_digital\":true,\"ts_invoice_trading\":true,\"ts_pay\":true},\"functions_status\":{\"ts_digital\":{\"active\":true},\"ts_pay\":{\"active\":false}}},\"accountant_id\":12345,\"is_accountant\":true}";
        assertEquals(str, json);
        CompanyInfo generated = gson.fromJson(str, CompanyInfo.class);
        assertEquals(c, generated);

        Object o = model;
        assertEquals(model, o);
        assertFalse(model.equals(null));
        assertFalse(model.equals(Integer.getInteger("5")));
    }

    /**
     * Test the property 'id'
     */
    @Test
    public void idTest() {
        assertNull(model.getId());
        model.setId(12345);
        assertEquals(12345, model.getId());

        CompanyInfo c = model.id(67890);
        CompanyInfo expected = new CompanyInfo();
        expected.setId(67890);
        assertEquals(expected, c);
    }

    /**
     * Test the property 'name'
     */
    @Test
    public void nameTest() {
        assertNull(model.getName());
        model.setName("Volley Bergamo 1991 S.r.l.");
        assertEquals("Volley Bergamo 1991 S.r.l.", model.getName());

        CompanyInfo c = model.name("Madbit Entertainment S.r.l.");
        CompanyInfo expected = new CompanyInfo();
        expected.setName("Madbit Entertainment S.r.l.");
        assertEquals(expected, c);
    }

    /**
     * Test the property 'email'
     */
    @Test
    public void emailTest() {
        assertNull(model.getEmail());
        model.setEmail("info@yopmail.com");
        assertEquals("info@yopmail.com", model.getEmail());

        CompanyInfo c = model.email("info@fattureincloud.it");
        CompanyInfo expected = new CompanyInfo();
        expected.setEmail("info@fattureincloud.it");
        assertEquals(expected, c);
    }

    /**
     * Test the property 'type'
     */
    @Test
    public void typeTest() {
        assertNull(model.getType());
        model.setType(CompanyType.COMPANY);
        assertEquals(CompanyType.COMPANY, model.getType());

        CompanyInfo c = model.type(CompanyType.ACCOUNTANT);
        CompanyInfo expected = new CompanyInfo();
        expected.setType(CompanyType.ACCOUNTANT);
        assertEquals(expected, c);
    }

    /**
     * Test the property 'accessInfo'
     */
    @Test
    public void accessInfoTest() {
        CompanyInfoAccessInfo c1 = new CompanyInfoAccessInfo()
                .role(UserCompanyRole.EMPLOYEE)
                .throughAccountant(false);

        CompanyInfoAccessInfo c2 = new CompanyInfoAccessInfo()
                .role(UserCompanyRole.MASTER)
                .throughAccountant(true);

        assertNull(model.getAccessInfo());
        model.setAccessInfo(c1);
        assertEquals(c1, model.getAccessInfo());

        CompanyInfo c = model.accessInfo(c2);
        CompanyInfo expected = new CompanyInfo();
        expected.setAccessInfo(c2);
        assertEquals(expected, c);
    }

    /**
     * Test the property 'planInfo'
     */
    @Test
    public void planInfoTest() {
        CompanyInfoPlanInfo c1 = new CompanyInfoPlanInfo()
                .limits(new CompanyInfoPlanInfoLimits()
                        .clients(5000)
                        .suppliers(5000)
                        .products(5000)
                        .documents(3000)
                )
                .functions(new CompanyInfoPlanInfoFunctions()
                        .documentAttachments(true)
                        .archive(true)
                        .paymentNotifications(true)
                        .paypal(true)
                        .receipts(true)
                        .eInvoice(true)
                        .genius(true)
                        .stock(true)
                        .smtp(true)
                        .mailTracking(true)
                        .subaccounts(true)
                        .tesseraSanitaria(true)
                        .recurring(true)
                        .sofort(false)
                        .cerved(true)
                        .tsDigital(true)
                        .tsPay(true)
                        .tsInvoiceTrading(true)
                )
                .functionsStatus(new CompanyInfoPlanInfoFunctionsStatus()
                        .tsDigital(new FunctionStatus()
                                .active(true)
                        )
                        .tsPay(new FunctionStatus()
                                .active(true)
                        )
                );

        CompanyInfoPlanInfo c2 = new CompanyInfoPlanInfo()
                .limits(new CompanyInfoPlanInfoLimits()
                        .clients(2000)
                        .suppliers(2000)
                        .products(2000)
                        .documents(1000)
                )
                .functions(new CompanyInfoPlanInfoFunctions()
                        .documentAttachments(false)
                        .archive(false)
                        .paymentNotifications(false)
                        .paypal(true)
                        .receipts(false)
                        .eInvoice(false)
                        .genius(false)
                        .stock(false)
                        .smtp(false)
                        .mailTracking(false)
                        .subaccounts(false)
                        .tesseraSanitaria(false)
                        .recurring(false)
                        .sofort(false)
                        .cerved(false)
                        .tsDigital(false)
                        .tsPay(false)
                        .tsInvoiceTrading(false)
                )
                .functionsStatus(new CompanyInfoPlanInfoFunctionsStatus()
                        .tsDigital(new FunctionStatus()
                                .active(false)
                        )
                        .tsPay(new FunctionStatus()
                                .active(false)
                        )
                );

        assertNull(model.getPlanInfo());
        model.setPlanInfo(c1);
        assertEquals(c1, model.getPlanInfo());

        CompanyInfo c = model.planInfo(c2);
        CompanyInfo expected = new CompanyInfo();
        expected.setPlanInfo(c2);
        assertEquals(expected, c);
    }

    /**
     * Test the property 'accountantId'
     */
    @Test
    public void accountantIdTest() {
        assertNull(model.getAccountantId());
        model.setAccountantId(1);
        assertEquals(1, model.getAccountantId());

        CompanyInfo c = model.accountantId(2);
        CompanyInfo expected = new CompanyInfo();
        expected.setAccountantId(2);
        assertEquals(expected, c);
    }

    /**
     * Test the property 'isAccountant'
     */
    @Test
    public void isAccountantTest() {
        assertNull(model.getIsAccountant());
        model.setIsAccountant(true);
        assertEquals(true, model.getIsAccountant());

        CompanyInfo c = model.isAccountant(false);
        CompanyInfo expected = new CompanyInfo();
        expected.setIsAccountant(false);
        assertEquals(expected, c);
    }

}
