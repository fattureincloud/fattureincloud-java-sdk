/*
 * Fatture in Cloud API v2 - API Reference
 * Connect your software with Fatture in Cloud, the invoicing platform chosen by more than 400.000 businesses in Italy.   The Fatture in Cloud API is based on REST, and makes possible to interact with the user related data prior authorization via OAuth2 protocol.
 *
 * The version of the OpenAPI document: 2.0.11
 * Contact: info@fattureincloud.it
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package it.fattureincloud.sdk.api;

import static org.junit.jupiter.api.Assertions.assertEquals;

import it.fattureincloud.sdk.ApiClient;
import it.fattureincloud.sdk.ApiException;
import it.fattureincloud.sdk.model.*;
import java.io.IOException;
import okhttp3.*;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;

/** API tests for IssuedEInvoicesApi */
public class IssuedEInvoicesApiTest {

  private static IssuedEInvoicesApi mockApi(final String serializedBody, final Call remoteCall)
      throws IOException {
    final OkHttpClient okHttpClient = Mockito.mock(OkHttpClient.class);

    Response.Builder builder =
        new Response.Builder()
            .request(new Request.Builder().url("https://api-v2.fattureincloud.it").build())
            .protocol(Protocol.HTTP_1_1)
            .code(200)
            .message("");
    if (serializedBody != null) {
      builder =
          builder.body(ResponseBody.create(serializedBody, MediaType.parse("application/json")));
    }

    final Response response = builder.build();

    Mockito.when(remoteCall.execute()).thenReturn(response);
    Mockito.when(okHttpClient.newCall(Mockito.any())).thenReturn(remoteCall);

    ApiClient client = new ApiClient(okHttpClient);

    return new IssuedEInvoicesApi(client);
  }

  /**
   * Send the e-invoice
   *
   * <p>Sends the e-invoice to SDI.
   *
   * @throws ApiException if the Api call fails
   */
  @Test
  public void sendEInvoiceTest() throws ApiException, IOException {
    String result = "{\"data\":{\"name\":\"neim\",\"date\":\"2021-12-31\"}}";

    Call mockCall = Mockito.mock(Call.class);
    IssuedEInvoicesApi api = mockApi(result, mockCall);

    Integer companyId = 11111;
    Integer documentId = 12345;

    SendEInvoiceRequestData sendEInvoiceRequestData =
        new SendEInvoiceRequestData().cassaType("cassa taip").withholdingTaxCausal("scausal");

    SendEInvoiceResponseData expected =
        new SendEInvoiceResponseData().name("neim").date("2021-12-31");

    SendEInvoiceRequest sendEInvoiceRequest =
        new SendEInvoiceRequest().data(sendEInvoiceRequestData);

    SendEInvoiceResponse response = api.sendEInvoice(companyId, documentId, sendEInvoiceRequest);

    assertEquals(expected, response.getData());
    Mockito.verify(mockCall, Mockito.only()).execute();
  }

  /**
   * Verify e-invoice xml
   *
   * <p>Verifies the e-invoice xml format. Checks if all of the mandatory fields are filled and
   * compliant to the right format.
   *
   * @throws ApiException if the Api call fails
   */
  @Test
  public void verifyEInvoiceXmlTest() throws ApiException, IOException {
    String result = "{\"data\":{\"success\":true}}";

    Call mockCall = Mockito.mock(Call.class);
    IssuedEInvoicesApi api = mockApi(result, mockCall);

    Integer companyId = 11111;
    Integer documentId = 16451;

    VerifyEInvoiceXmlResponse expected =
        new VerifyEInvoiceXmlResponse().data(new VerifyEInvoiceXmlResponseData().success(true));

    VerifyEInvoiceXmlResponse response = api.verifyEInvoiceXml(companyId, documentId);
    assertEquals(expected.getData(), response.getData());
    Mockito.verify(mockCall, Mockito.only()).execute();
  }

  /**
   * Get the e-invoice xml
   *
   * <p>Retreives the e-invoice xml.
   *
   * @throws ApiException if the Api call fails
   */
  @Test
  public void getEInvoiceXmlTest() throws ApiException, IOException {
    String result = "<xml-fattura>fields</xml-fattura>";

    Call mockCall = Mockito.mock(Call.class);
    IssuedEInvoicesApi api = mockApi(result, mockCall);

    Integer companyId = 11111;
    Integer documentId = 16451;
    Boolean includeAttachment = true;

    String expected = "<xml-fattura>fields</xml-fattura>";

    String response = api.getEInvoiceXml(companyId, documentId, includeAttachment);
    assertEquals(expected, response);
    Mockito.verify(mockCall, Mockito.only()).execute();
  }
}
