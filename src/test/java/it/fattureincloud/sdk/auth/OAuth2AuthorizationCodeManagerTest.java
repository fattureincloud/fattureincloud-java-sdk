/*
 * Fatture in Cloud API v2 - API Reference
 * Connect your software with Fatture in Cloud, the invoicing platform chosen by more than 400.000 businesses in Italy.   The Fatture in Cloud API is based on REST, and makes possible to interact with the user related data prior authorization via OAuth2 protocol.
 *
 * The version of the OpenAPI document: 2.0.11
 * Contact: info@fattureincloud.it
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package it.fattureincloud.sdk.auth;

import io.vavr.control.Either;
import okhttp3.*;
import okhttp3.mockwebserver.MockResponse;
import okhttp3.mockwebserver.MockWebServer;
import okhttp3.mockwebserver.RecordedRequest;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;

import java.io.IOException;
import java.nio.charset.Charset;
import java.nio.charset.StandardCharsets;
import java.util.Arrays;
import java.util.LinkedList;
import java.util.List;
import java.util.Optional;

import static org.junit.jupiter.api.Assertions.assertEquals;

/**
 * Tests for OAuth2AuthorizationCodeManager
 */
public class OAuth2AuthorizationCodeManagerTest {
    private static final MediaType JSON
            = MediaType.get("application/json; charset=utf-8");

    private OAuth2AuthorizationCodeManager manager;
    private MockWebServer mockWebServer;

    @BeforeEach
    public void init() throws IOException {
        manager = new OAuth2AuthorizationCodeManager("CLIENT_ID", "CLIENT_SECRET", "http://localhost:8080/redirect");
        mockWebServer = new MockWebServer();
        mockWebServer.start();
    }

    @AfterEach
    public void tearDown() throws IOException {
        mockWebServer.shutdown();
    }

    /**
     * Model tests for OAuth2AuthorizationCodeManager
     */
    @Test
    public void testOAuth2AuthorizationCodeManager() {
        /*OAuth2AuthorizationCodeResponse response = new OAuth2AuthorizationCodeResponse("bearer", "a/ACCESS_TOKEN", "r/REFRESH_TOKEN", 86400);

        JSON jsonManager = new JSON();
        Gson gson = jsonManager.getGson();
        String json = gson.toJson(response);
        String str = "{\"token_type\":\"bearer\",\"access_token\":\"a/ACCESS_TOKEN\",\"refresh_token\":\"r/REFRESH_TOKEN\",\"expires_in\":86400}";
        assertEquals(str, json);
        OAuth2AuthorizationCodeResponse generated = gson.fromJson(str, OAuth2AuthorizationCodeResponse.class);
        assertEquals(response, generated);

        Object o = response;
        assertEquals(response, o);
        assertFalse(response.equals(null));
        assertFalse(response.equals(Integer.getInteger("5")));*/
    }

    /**
     * Test the property 'clientId'
     */
    @Test
    public void clientIdTest() {
        assertEquals("CLIENT_ID", manager.getClientId());
        manager.setClientId("something");
        assertEquals("something", manager.getClientId());
    }

    /**
     * Test the property 'clientSecret'
     */
    @Test
    public void clientSecretTest() {
        assertEquals("CLIENT_SECRET", manager.getClientSecret());
        manager.setClientSecret("something secret");
        assertEquals("something secret", manager.getClientSecret());
    }

    /**
     * Test the property 'redirectUri'
     */
    @Test
    public void redirectUriTest() {
        assertEquals("http://localhost:8080/redirect", manager.getRedirectUri());
        manager.setRedirectUri("https://www.url.com/redirect");
        assertEquals("https://www.url.com/redirect", manager.getRedirectUri());
    }

    /**
     * Test the property 'baseUri'
     */
    @Test
    public void baseUriTest() {
        assertEquals("https://api-v2.fattureincloud.it", manager.getBaseUri());
        manager.setBaseUri("https://www.mock.it");
        assertEquals("https://www.mock.it", manager.getBaseUri());
        manager.setBaseUri(Optional.of("https://www.google.com"));
        assertEquals("https://www.google.com", manager.getBaseUri());
        manager.setBaseUri(Optional.empty());
        assertEquals("https://api-v2.fattureincloud.it", manager.getBaseUri());
    }

    /**
     * Test the method 'getAuthorizationUrl'
     */
    @Test
    public void getAuthorizationUrlTest() {
        LinkedList<Scope> scopes = new LinkedList<>();
        scopes.add(Scope.ISSUED_DOCUMENTS_INVOICES_ALL);
        scopes.add(Scope.SETTINGS_READ);

        String exp = "https://api-v2.fattureincloud.it/oauth/authorize?scope=issued_documents.invoices%3Aa+settings%3Ar&response_type=code&redirect_uri=http%3A%2F%2Flocalhost%3A8080%2Fredirect&state=I_AM_HUNGRY&client_id=CLIENT_ID";
        assertEquals(exp, manager.getAuthorizationUrl(scopes, "I_AM_HUNGRY"));

        List<Scope> scopes2 = Arrays.asList(Scope.ARCHIVE_READ, Scope.CASHBOOK_ALL, Scope.SITUATION);
        exp = "https://api-v2.fattureincloud.it/oauth/authorize?scope=archive%3Ar+cashbook%3Aa+situation%3Ar&response_type=code&redirect_uri=http%3A%2F%2Flocalhost%3A8080%2Fredirect&state=I_AM_HUNGRY&client_id=CLIENT_ID";
        assertEquals(exp, manager.getAuthorizationUrl(scopes2, "I_AM_HUNGRY"));

        exp = "https://api-v2.fattureincloud.it/oauth/authorize?scope=archive%3Ar+cashbook%3Aa+situation%3Ar&response_type=code&redirect_uri=http%3A%2F%2Flocalhost%3A8080%2Fredirect&state=I_AM_THIRSTY&client_id=CLIENT_ID";
        assertEquals(exp, manager.getAuthorizationUrl(scopes2, "I_AM_THIRSTY"));

        manager.setBaseUri("http://localhost:3000");
        exp = "http://localhost:3000/oauth/authorize?scope=archive%3Ar+cashbook%3Aa+situation%3Ar&response_type=code&redirect_uri=http%3A%2F%2Flocalhost%3A8080%2Fredirect&state=I_AM_THIRSTY&client_id=CLIENT_ID";
        assertEquals(exp, manager.getAuthorizationUrl(scopes2, "I_AM_THIRSTY"));

        manager.setBaseUri((String) null);
        exp = "https://api-v2.fattureincloud.it/oauth/authorize?scope=archive%3Ar+cashbook%3Aa+situation%3Ar&response_type=code&redirect_uri=http%3A%2F%2Flocalhost%3A8080%2Fredirect&state=I_AM_THIRSTY&client_id=CLIENT_ID";
        assertEquals(exp, manager.getAuthorizationUrl(scopes2, "I_AM_THIRSTY"));

        manager.setRedirectUri("https://www.fakeapp.com/redirect");
        exp = "https://api-v2.fattureincloud.it/oauth/authorize?scope=archive%3Ar+cashbook%3Aa+situation%3Ar&response_type=code&redirect_uri=https%3A%2F%2Fwww.fakeapp.com%2Fredirect&state=I_AM_THIRSTY&client_id=CLIENT_ID";
        assertEquals(exp, manager.getAuthorizationUrl(scopes2, "I_AM_THIRSTY"));

        manager.setClientId("AF");
        exp = "https://api-v2.fattureincloud.it/oauth/authorize?scope=archive%3Ar+cashbook%3Aa+situation%3Ar&response_type=code&redirect_uri=https%3A%2F%2Fwww.fakeapp.com%2Fredirect&state=IS+THE+BEST&client_id=AF";
        assertEquals(exp, manager.getAuthorizationUrl(scopes2, "IS THE BEST"));
    }

    /**
     * Test the method 'getParamsFromUrl'
     */
    @Test
    public void getParamsFromUrlTest() throws Exception {
        OAuth2AuthorizationCodeParams params = manager.getParamsFromUrl("https://www.yourapplication.com/redirect?state=I+AM+HUNGRY&code=c%2FFAKE_CODE");
        assertEquals(new OAuth2AuthorizationCodeParams("I AM HUNGRY", "c/FAKE_CODE"), params);
    }

    /**
     * Test the method 'fetchToken'
     */
    @Test
    public void fetchTokenTest() throws Exception {
        final OkHttpClient okHttpClient = Mockito.mock(OkHttpClient.class);
        Call mockCall = Mockito.mock(Call.class);

        String jsonResponse = "{\"token_type\":\"bearer\",\"access_token\":\"a/THIS_IS_A_TOKEN\",\"refresh_token\":\"r/RINFRESCA_IL_TOKEN\",\"expires_in\":86400}";

        Response.Builder builder = new Response.Builder()
                .request(new Request.Builder().url("https://api-v2.fattureincloud.it").build())
                .protocol(Protocol.HTTP_1_1)
                .code(200)
                .message("");

            builder = builder.body(
                    ResponseBody.create(
                            jsonResponse,
                            MediaType.parse("application/json")
                    ));

        final Response response = builder.build();

        Mockito.when(mockCall.execute()).thenReturn(response);
        Mockito.when(okHttpClient.newCall(Mockito.any())).thenReturn(mockCall);

        manager.setHttpClient(okHttpClient);

        Either<OAuth2AuthorizationCodeError, OAuth2AuthorizationCodeResponse> res = manager.fetchToken("c/GIMME_A_TOKEN");
        assert(res.isRight());
        OAuth2AuthorizationCodeResponse exp = new OAuth2AuthorizationCodeResponse("bearer", "a/THIS_IS_A_TOKEN", "r/RINFRESCA_IL_TOKEN", 86400);
        assertEquals(exp, res.get());
        Mockito.verify(mockCall, Mockito.only()).execute();
    }

    /**
     * Test the method 'fetchToken' - error case
     */
    @Test
    public void fetchTokenErrorTest() throws Exception {
        final OkHttpClient okHttpClient = Mockito.mock(OkHttpClient.class);
        Call mockCall = Mockito.mock(Call.class);

        String jsonResponse = "{\"error\":\"wtf\",\"error_description\":\"ma perché è gialla?\"}";

        Response.Builder builder = new Response.Builder()
                .request(new Request.Builder().url("https://api-v2.fattureincloud.it").build())
                .protocol(Protocol.HTTP_1_1)
                .code(401)
                .message("");

        builder = builder.body(
                ResponseBody.create(
                        jsonResponse,
                        MediaType.parse("application/json")
                ));

        final Response response = builder.build();

        Mockito.when(mockCall.execute()).thenReturn(response);
        Mockito.when(okHttpClient.newCall(Mockito.any())).thenReturn(mockCall);

        manager.setHttpClient(okHttpClient);

        Either<OAuth2AuthorizationCodeError, OAuth2AuthorizationCodeResponse> res = manager.fetchToken("c/GIMME_GIMME_GIMME_A_TOKEN");
        assert(res.isLeft());
        OAuth2AuthorizationCodeError exp = new OAuth2AuthorizationCodeError("wtf", "ma perché è gialla?", 401);
        assertEquals(exp, res.getLeft());
        Mockito.verify(mockCall, Mockito.only()).execute();
    }

    /**
     * Test the method 'fetchToken' - mock server
     */
    @Test
    public void fetchTokenTestWithMockServer() throws Exception {
        String httpUrl = mockWebServer.url("").toString();
        httpUrl = httpUrl.substring(0, httpUrl.length() - 1);
        manager.setBaseUri(httpUrl);

        MockResponse mockedResponse = new MockResponse()
                .setBody("{\"token_type\":\"bearer\",\"access_token\":\"a/THIS_IS_A_TOKEN\",\"refresh_token\":\"r/RINFRESCA_IL_TOKEN\",\"expires_in\":86400}")
                .addHeader("Content-Type", "application/json");

        mockWebServer.enqueue(mockedResponse);

        assertEquals(0, mockWebServer.getRequestCount());

        Either<OAuth2AuthorizationCodeError, OAuth2AuthorizationCodeResponse> res = manager.fetchToken("c/GIMME_A_TOKEN");
        assert (res.isRight());
        OAuth2AuthorizationCodeResponse exp = new OAuth2AuthorizationCodeResponse("bearer", "a/THIS_IS_A_TOKEN", "r/RINFRESCA_IL_TOKEN", 86400);
        assertEquals(exp, res.get());
        assertEquals(1, mockWebServer.getRequestCount());

        RecordedRequest recordedRequest = mockWebServer.takeRequest();
        assertEquals("/oauth/token", recordedRequest.getPath());
        assertEquals("POST", recordedRequest.getMethod());
        assertEquals("{\"code\":\"c/GIMME_A_TOKEN\",\"grant_type\":\"authorization_code\",\"client_secret\":\"CLIENT_SECRET\",\"redirect_uri\":\"http://localhost:8080/redirect\",\"client_id\":\"CLIENT_ID\"}", recordedRequest.getBody().readString(StandardCharsets.UTF_8));
        assertEquals("application/json; charset=utf-8", recordedRequest.getHeader("Content-Type"));
    }

    /**
     * Test the method 'refreshToken'
     */
    @Test
    public void refreshTokenTest() throws Exception {
        final OkHttpClient okHttpClient = Mockito.mock(OkHttpClient.class);
        Call mockCall = Mockito.mock(Call.class);

        String jsonResponse = "{\"token_type\":\"bearer\",\"access_token\":\"a/THIS_IS_A_NEW_TOKEN\",\"refresh_token\":\"r/SO_FRESH\",\"expires_in\":86400}";

        Response.Builder builder = new Response.Builder()
                .request(new Request.Builder().url("https://api-v2.fattureincloud.it").build())
                .protocol(Protocol.HTTP_1_1)
                .code(200)
                .message("");

        builder = builder.body(
                ResponseBody.create(
                        jsonResponse,
                        MediaType.parse("application/json")
                ));

        final Response response = builder.build();

        Mockito.when(mockCall.execute()).thenReturn(response);
        Mockito.when(okHttpClient.newCall(Mockito.any())).thenReturn(mockCall);

        manager.setHttpClient(okHttpClient);

        Either<OAuth2AuthorizationCodeError, OAuth2AuthorizationCodeResponse> res = manager.refreshToken("r/REFRESH_ME");
        assert(res.isRight());
        OAuth2AuthorizationCodeResponse exp = new OAuth2AuthorizationCodeResponse("bearer", "a/THIS_IS_A_NEW_TOKEN", "r/SO_FRESH", 86400);
        assertEquals(exp, res.get());
        Mockito.verify(mockCall, Mockito.only()).execute();
    }

    /**
     * Test the method 'refreshToken' - error case
     */
    @Test
    public void refreshTokenErrorTest() throws Exception {
        final OkHttpClient okHttpClient = Mockito.mock(OkHttpClient.class);
        Call mockCall = Mockito.mock(Call.class);

        String jsonResponse = "{\"error\":\"so_hot\",\"error_description\":\"I_AM_MELTING\"}";

        Response.Builder builder = new Response.Builder()
                .request(new Request.Builder().url("https://api-v2.fattureincloud.it").build())
                .protocol(Protocol.HTTP_1_1)
                .code(418)
                .message("");

        builder = builder.body(
                ResponseBody.create(
                        jsonResponse,
                        MediaType.parse("application/json")
                ));

        final Response response = builder.build();

        Mockito.when(mockCall.execute()).thenReturn(response);
        Mockito.when(okHttpClient.newCall(Mockito.any())).thenReturn(mockCall);

        manager.setHttpClient(okHttpClient);

        Either<OAuth2AuthorizationCodeError, OAuth2AuthorizationCodeResponse> res = manager.refreshToken("r/WHY_IS_IT_SO_HOT_IN_HERE");
        assert(res.isLeft());
        OAuth2AuthorizationCodeError exp = new OAuth2AuthorizationCodeError("so_hot", "I_AM_MELTING", 418);
        assertEquals(exp, res.getLeft());
        Mockito.verify(mockCall, Mockito.only()).execute();
    }

    /**
     * Test the method 'refreshToken' - mock server
     */
    @Test
    public void refreshTokenTestWithMockServer() throws Exception {
        String httpUrl = mockWebServer.url("").toString();
        httpUrl = httpUrl.substring(0, httpUrl.length() - 1);
        manager.setBaseUri(httpUrl);

        MockResponse mockedResponse = new MockResponse()
                .setBody("{\"token_type\":\"bearer\",\"access_token\":\"a/THIS_IS_A_NEW_TOKEN\",\"refresh_token\":\"r/SO_FRESH\",\"expires_in\":86400}")
                .addHeader("Content-Type", "application/json");

        mockWebServer.enqueue(mockedResponse);

        assertEquals(0, mockWebServer.getRequestCount());

        Either<OAuth2AuthorizationCodeError, OAuth2AuthorizationCodeResponse> res = manager.refreshToken("r/REFRESH_ME");
        assert (res.isRight());
        OAuth2AuthorizationCodeResponse exp = new OAuth2AuthorizationCodeResponse("bearer", "a/THIS_IS_A_NEW_TOKEN", "r/SO_FRESH", 86400);
        assertEquals(exp, res.get());
        assertEquals(1, mockWebServer.getRequestCount());

        RecordedRequest recordedRequest = mockWebServer.takeRequest();
        assertEquals("/oauth/token", recordedRequest.getPath());
        assertEquals("POST", recordedRequest.getMethod());
        assertEquals("{\"refresh_token\":\"r/REFRESH_ME\",\"grant_type\":\"refresh_token\",\"client_secret\":\"CLIENT_SECRET\",\"client_id\":\"CLIENT_ID\"}", recordedRequest.getBody().readString(StandardCharsets.UTF_8));
        assertEquals("application/json; charset=utf-8", recordedRequest.getHeader("Content-Type"));
    }
}
