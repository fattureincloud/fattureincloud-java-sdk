plugins {
    id 'java-library'
    id 'maven-publish'
    id 'signing'
    id "com.diffplug.spotless" version "6.1.2"
}

group = 'it.fattureincloud'
version = '2.0.1'

java {
    withJavadocJar()
    withSourcesJar()
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'io.swagger:swagger-annotations:1.5.24'
    implementation "com.google.code.findbugs:jsr305:3.0.2"
    implementation 'com.squareup.okhttp3:okhttp:4.9.1'
    implementation 'com.squareup.okhttp3:logging-interceptor:4.9.1'
    implementation 'com.google.code.gson:gson:2.8.6'
    implementation 'io.gsonfire:gson-fire:1.8.4'
    implementation 'org.openapitools:jackson-databind-nullable:0.2.2'
    implementation group: 'org.apache.oltu.oauth2', name: 'org.apache.oltu.oauth2.client', version: '1.0.1'
    implementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.10'
    implementation "jakarta.annotation:jakarta.annotation-api:1.3.5"
    testImplementation(platform('org.junit:junit-bom:5.8.2'))
    testImplementation('org.junit.jupiter:junit-jupiter:5.8.2')
    testImplementation 'org.mockito:mockito-core:4.1.0'
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = 'fattureincloud-java-sdk'
            from components.java
            versionMapping {
                usage('java-api') {
                    fromResolutionOf('runtimeClasspath')
                }
                usage('java-runtime') {
                    fromResolutionResult()
                }
            }
            pom {
                name = 'Fatture in Cloud Java SDK'
                description = 'Java SDK for the Fatture in Cloud API'
                url = 'https://github.com/fattureincloud/fattureincloud-java-sdk'
                licenses {
                    license {
                        name = 'MIT'
                        url = 'https://github.com/fattureincloud/openapi-fattureincloud/blob/master/LICENSE'
                        distribution = 'repo'
                    }
                }
                developers {
                    developer {
                        name = 'Fatture In Cloud API Team'
                        email = 'info@fattureincloud.it'
                        organization = 'Fatture in Cloud'
                        organizationUrl = 'https://www.fattureincloud.it'
                    }
                }
                scm {
                    connection = 'scm:git:git@github.com:fattureincloud/fattureincloud-java-sdk.git'
                    developerConnection = 'scm:git:git@github.com:fattureincloud/fattureincloud-java-sdk.git'
                    url = 'https://github.com/fattureincloud/fattureincloud-java-sdk.git'
                }
            }
        }
    }
    repositories {
        maven {
            name = "OSSRH"
            url = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
            credentials {
                username = System.getenv("OSSRH_USERNAME")
                password = System.getenv("OSSRH_PASSWORD")
            }
        }
    }
}

signing {
    def signingKeyId = System.getenv("GPG_KEY_ID")
    def signingKey = System.getenv("GPG_KEY")
    def signingPassword = System.getenv("GPG_PASSPHRASE")
    useInMemoryPgpKeys(signingKeyId, signingKey, signingPassword)
    sign publishing.publications.mavenJava
}


javadoc {
    options.tags = ["http.response.details:a:Http Response Details"]
    options.encoding = 'UTF-8'
    if(JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption('html5', true)
    }
}

test {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
    }
}

// Use spotless plugin to automatically format code, remove unused import, etc
// To apply changes directly to the file, run `gradlew spotlessApply`
// Ref: https://github.com/diffplug/spotless/tree/main/plugin-gradle
spotless {
    // comment out below to run spotless as part of the `check` task
    enforceCheck false

    format 'misc', {
        // define the files (e.g. '*.gradle', '*.md') to apply `misc` to
        target '.gitignore'

        // define the steps to apply to those files
        trimTrailingWhitespace()
        indentWithSpaces() // Takes an integer argument if you don't like 4
        endWithNewline()
    }
    java {
        // don't need to set target, it is inferred from java

        // apply a specific flavor of google-java-format
        googleJavaFormat('1.13.0').aosp().reflowLongStrings()

        removeUnusedImports()
        importOrder()
    }
}

/*apply plugin: 'idea'
apply plugin: 'eclipse'
apply plugin: 'java'
apply plugin: 'com.diffplug.spotless'

group = 'it.fattureincloud'
version = '2.0.1'

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:2.3.+'
        classpath 'com.github.dcendents:android-maven-gradle-plugin:1.5'
        classpath 'com.diffplug.spotless:spotless-plugin-gradle:5.17.1'
    }
}

repositories {
    mavenCentral()
}
sourceSets {
    main.java.srcDirs = ['src/main/java']
}

if (hasProperty('target') && target == 'android') {

    apply plugin: 'com.android.library'
    apply plugin: 'com.github.dcendents.android-maven'

    android {
        compileSdkVersion 25
        buildToolsVersion '25.0.2'
        defaultConfig {
            minSdkVersion 14
            targetSdkVersion 25
        }
        compileOptions {
            sourceCompatibility JavaVersion.VERSION_1_8
            targetCompatibility JavaVersion.VERSION_1_8
        }

        // Rename the aar correctly
        libraryVariants.all { variant ->
            variant.outputs.each { output ->
                def outputFile = output.outputFile
                if (outputFile != null && outputFile.name.endsWith('.aar')) {
                    def fileName = "${project.name}-${variant.baseName}-${version}.aar"
                    output.outputFile = new File(outputFile.parent, fileName)
                }
            }
        }

        dependencies {
            provided "jakarta.annotation:jakarta.annotation-api:$jakarta_annotation_version"
        }
    }

    afterEvaluate {
        android.libraryVariants.all { variant ->
            def task = project.tasks.create "jar${variant.name.capitalize()}", Jar
            task.description = "Create jar artifact for ${variant.name}"
            task.dependsOn variant.javaCompile
            task.from variant.javaCompile.destinationDir
            task.destinationDir = project.file("${project.buildDir}/outputs/jar")
            task.archiveName = "${project.name}-${variant.baseName}-${version}.jar"
            artifacts.add('archives', task);
        }
    }

    task sourcesJar(type: Jar) {
        from android.sourceSets.main.java.srcDirs
        classifier = 'sources'
    }

    artifacts {
        archives sourcesJar
    }

} else {

    apply plugin: 'java'
    apply plugin: 'maven-publish'
    apply plugin: 'signing'

    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8

    tasks.withType(JavaCompile) {
        options.encoding = "UTF-8"
    }

    task sourcesJar(type: Jar) {
        classifier "sources"
        from sourceSets.main.allSource
    }

    task javadocJar(type: Jar) {
        classifier "javadoc"
        from javadoc
    }

    artifacts {
        archives sourcesJar, javadocJar
    }

    signing {
        def signingKeyId = System.getenv("GPG_KEY_ID")
        def signingKey = System.getenv("GPG_KEY")
        def signingPassword = System.getenv("GPG_PASSPHRASE")
        useInMemoryPgpKeys(signingKeyId, signingKey, signingPassword)
        sign configurations.archives
    }

    publishing {
        publications {
            mavenJava(MavenPublication) {
                artifactId = 'fattureincloud-java-sdk'
                from components.java
                versionMapping {
                    usage('java-api') {
                        fromResolutionOf('runtimeClasspath')
                    }
                    usage('java-runtime') {
                        fromResolutionResult()
                    }
                }

                pom {
                    name = 'Fatture in Cloud Java SDK'
                    description = 'Java SDK for the Fatture in Cloud API'
                    url = 'https://github.com/fattureincloud/fattureincloud-java-sdk'
                    licenses {
                        license {
                            name = 'MIT'
                            url = 'https://github.com/fattureincloud/openapi-fattureincloud/blob/master/LICENSE'
                            distribution = 'repo'
                        }
                    }
                    developers {
                        developer {
                            name = 'Fatture In Cloud API Team'
                            email = 'info@fattureincloud.it'
                            organization = 'Fatture in Cloud'
                            organizationUrl = 'https://www.fattureincloud.it'
                        }
                    }
                    scm {
                        connection = 'scm:git:git@github.com:fattureincloud/fattureincloud-java-sdk.git'
                        developerConnection = 'scm:git:git@github.com:fattureincloud/fattureincloud-java-sdk.git'
                        url = 'https://github.com/fattureincloud/fattureincloud-java-sdk.git'
                    }
                }

                // create the sign pom artifact
                pom.withXml {
                    def pomFile = file("${project.buildDir}/pom.xml")
                    writeTo(pomFile)
                    def pomAscFile = signing.sign(pomFile).signatureFiles[0]
                    artifact(pomAscFile) {
                        classifier = null
                        extension = 'pom.asc'
                    }
                }

                artifact(sourcesJar) {
                    classifier = 'sources'
                }
                artifact(javadocJar) {
                    classifier = 'javadoc'
                }

                // create the signed artifacts
                project.tasks.signArchives.signatureFiles.each {
                    artifact(it) {
                        def matcher = it.file =~ /-(sources|javadoc)\.jar\.asc$/
                        if (matcher.find()) {
                            classifier = matcher.group(1)
                        } else {
                            classifier = null
                        }
                        extension = 'jar.asc'
                    }
                }
            }
        }
        repositories {
            maven {
                name = "OSSRH"
                url = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
                credentials {
                    username = System.getenv("OSSRH_USERNAME")
                    password = System.getenv("OSSRH_PASSWORD")
                }
            }
        }
    }

    task execute(type: JavaExec) {
       mainClass = System.getProperty('mainClass')
       classpath = sourceSets.main.runtimeClasspath
    }
}

ext {
    jakarta_annotation_version = "1.3.5"
}

test {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
    }
}

dependencies {
    implementation 'io.swagger:swagger-annotations:1.5.24'
    implementation "com.google.code.findbugs:jsr305:3.0.2"
    implementation 'com.squareup.okhttp3:okhttp:4.9.1'
    implementation 'com.squareup.okhttp3:logging-interceptor:4.9.1'
    implementation 'com.google.code.gson:gson:2.8.6'
    implementation 'io.gsonfire:gson-fire:1.8.4'
    implementation 'org.openapitools:jackson-databind-nullable:0.2.2'
    implementation group: 'org.apache.oltu.oauth2', name: 'org.apache.oltu.oauth2.client', version: '1.0.1'
    implementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.10'
    implementation "jakarta.annotation:jakarta.annotation-api:$jakarta_annotation_version"
    testImplementation(platform('org.junit:junit-bom:5.8.2'))
    testImplementation('org.junit.jupiter:junit-jupiter:5.8.2')
    testImplementation 'org.mockito:mockito-core:4.1.0'
}

javadoc {
    options.tags = ["http.response.details:a:Http Response Details"]
    options.encoding = 'UTF-8'
}

// Use spotless plugin to automatically format code, remove unused import, etc
// To apply changes directly to the file, run `gradlew spotlessApply`
// Ref: https://github.com/diffplug/spotless/tree/main/plugin-gradle
spotless {
    // comment out below to run spotless as part of the `check` task
    enforceCheck false

    format 'misc', {
        // define the files (e.g. '*.gradle', '*.md') to apply `misc` to
        target '.gitignore'

        // define the steps to apply to those files
        trimTrailingWhitespace()
        indentWithSpaces() // Takes an integer argument if you don't like 4
        endWithNewline()
    }
    java {
        // don't need to set target, it is inferred from java

        // apply a specific flavor of google-java-format
        googleJavaFormat('1.8').aosp().reflowLongStrings()

        removeUnusedImports()
        importOrder()
    }
}*/
